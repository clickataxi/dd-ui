{"banner":"/*\n * dd-ui\n * http://clickataxi.github.io/dd-ui/\n\n * Version: 0.6.8 - 2016-07-14\n * License: MIT\n */","cssBanner":"/* Include this file in your html if you are using the CSP mode. */\n\n","files":{"src/arrow-key-nav/arrow-key-nav.js":"angular.module('dd.ui.arrow-key-nav', [])\n.directive('ddArrowKeyNav', ['$document', function ($document) {\n    return {\n        restrict: 'EA',\n        link: function ($scope, containerElement, attrs, ctrl) {\n            var className = 'arrow-key-nav';\n\n            containerElement.on('keydown', function(event) {\n                if (attrs.arrowKeyModifier) {\n                    if (!event[attrs.arrowKeyModifier.toLowerCase() + 'Key']) {\n                        return;\n                    }\n                }\n\n                if (event.keyCode === 38) { // key up\n                    event.preventDefault();\n                    navigateUp();\n                } else if (event.keyCode === 40) { // key down\n                    event.preventDefault();\n                    navigateDown();\n                }\n            });\n\n            function navigateUp() {\n                var prevElement = getNextElement(true);\n                if (prevElement) {\n                    prevElement.focus();\n                }\n            }\n\n            function navigateDown() {\n                var nextElement = getNextElement();\n                if (nextElement) {\n                    nextElement.focus();\n                }\n            }\n\n            function getNextElement(reverse) {\n                var focusableElements = getFocusableElements();\n                if (reverse) {\n                    focusableElements.reverse();\n                }\n\n                var currentIndex = focusableElements ? focusableElements.indexOf($document[0].activeElement) : -1;\n                if (currentIndex !== -1) {\n                    var next = focusableElements.slice(currentIndex + 1).find(isNavigatableElement);\n\n                    if (!next) {\n                        next = focusableElements.slice(0, currentIndex).find(isNavigatableElement);\n                    }\n\n                    return next;\n                }\n            }\n\n            function isNavigatableElement(element) {\n                return $(element).hasClass(className);\n            }\n\n            function getFocusableElements() {\n                return $(containerElement).find('*').filter(function(index, el) {\n                    return isFocusable(el);\n                }).toArray();\n            }\n\n            function isFocusable(element) {\n                var jElement = $(element);\n                var nodeName = element.nodeName.toLowerCase(),\n                    tabIndex = jElement.attr('tabindex');\n                \n                return !element.disabled &&\n                       jElement.attr('disabled') !== 'disabled' &&\n                       !jElement.hasClass('disabled') &&\n                       (/input|select|textarea|button|object/.test(nodeName) ?\n                            true :\n                            nodeName === 'a' || nodeName === 'area' ?\n                                element.href || !isNaN(tabIndex) :\n                                !isNaN(tabIndex)\n                       ) &&\n                       !jElement.is(':hidden');\n            }\n        }\n    };\n}]);","src/busy-element/busy-element.js":"angular.module('dd.ui.busy-element', [])\n\n.directive('busyElement', ['$parse', '$timeout', '$rootScope', function ($parse, $timeout, $rootScope) {\n    return {\n        restrict: 'EA',\n        replace: true,\n        templateUrl:'template/busy-element/busy-element.html',\n        scope: {\n            busy: '=?',\n            status: '=?',\n            timeout: '=?'\n        },\n        link: function (scope, element, attr) {\n            updateSize();\n\n            scope.$watch('status', function() {\n                updateSize();\n                if (scope.status !== undefined) {\n                    scope.busy = false;\n                    scope.statusClass = scope.status;\n\n                    if (scope.timeout !== 0) {\n                        $timeout(function(){\n                            scope.status = null;\n                        }, scope.timeout ? scope.timeout : 500);\n                    }\n                }\n            });\n\n            function updateSize() {\n                var container = attr.busyElement ? angular.element(attr.busyElement) : element.parent();\n                var offset = container.offset();\n                element.offset(offset);\n\n                scope.width = container.innerWidth();\n                scope.height = container.innerHeight();\n                scope.marginLeft = container.css('padding-left');\n                scope.marginTop = container.css('padding-top');\n            }\n        }\n    };\n}]);","src/datetimepicker/datetimepicker.js":"angular.module('dd.ui.datetimepicker', ['ui.bootstrap'])\n\n.directive('datetimepicker', ['$document', function($document) {\n\treturn {\n\t\trestrict: 'EA',\n\t\trequire: 'ngModel',\n\t\ttemplateUrl: function(element, attrs) {\n\t\t\treturn attrs.templateUrl || 'template/datetimepicker/datetimepicker.html';\n\t\t},\n\t\tscope: {\n\t\t\tngModel: '=',\n\t\t\tminuteStep: '=?',\n\t\t\tshowSpinners: '=?',\n\t\t\tshowMeridian: '=?',\n\t\t\tngDisabled: '=?',\n\t\t\tdateDisabled: '&',\n\t\t\tpopupPlacement: '@?'\n\t\t},\n\n\t\tlink: function(scope, element, attrs, ctrl) {\n\t\t\tvar firstTimeAssign = true;\n\t\t\tvar timePickerElement = element.children().eq(0).children()[0];\n\n\t\t\t// hook up a view change listener to fire ng-change\n\t\t\tctrl.$viewChangeListeners.push(function() {\n\t\t\t\tscope.$eval(attrs.ngChange);\n\t\t\t});\n\n\t\t\tscope.$watch('ngModel', function(newTime) {\n\t\t\t\t// if a time element is focused, updating its model will cause hours/minutes to be formatted by padding with leading zeros\n\t\t\t\tif (!timePickerElement.contains($document[0].activeElement)) {\n\t\t\t\t\tif (!newTime) { // if the newTime is not defined\n\t\t\t\t\t\tif (firstTimeAssign) { // if it's the first time we assign the time value\n\t\t\t\t\t\t\t// create a new default time where the hours, minutes, seconds and milliseconds are set to 0.\n\t\t\t\t\t\t\tnewTime = new Date();\n\t\t\t\t\t\t\tnewTime.setHours(0, 0, 0, 0);\n\t\t\t\t\t\t} else { // just leave the time unchanged\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Update timepicker (watch on ng-model in timepicker does not use object equality),\n\t\t\t\t\t// also if the ngModel was not a Date, convert it to date\n\t\t\t\t\tnewTime = new Date(newTime);\n\n\t\t\t\t\tscope.time = newTime; // change the time\n\t\t\t\t\tif (firstTimeAssign) {\n\t\t\t\t\t\tif (!scope.ngModel) {\n\t\t\t\t\t\t\tscope.ngModel = new Date(newTime);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfirstTimeAssign = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, true);\n\n\t\t\tscope.dateChange = function() {\n\t\t\t\tvar time = scope.time;\n\t\t\t\tif (scope.ngModel) {\n\t\t\t\t\tscope.ngModel.setHours(time.getHours(), time.getMinutes(), 0, 0);\n\t\t\t\t\tctrl.$setViewValue(scope.ngModel);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tscope.timeChange = function() {\n\t\t\t\tif (scope.ngModel && scope.time) {\n\t\t\t\t\tif (!(scope.ngModel instanceof Date)) {\n\t\t\t\t\t\tscope.ngModel = new Date(scope.ngModel);\n\t\t\t\t\t}\n\t\t\t\t\tvar newValue = new Date(scope.ngModel);\n\t\t\t\t\tnewValue.setHours(scope.time.getHours(), scope.time.getMinutes(), 0, 0);\n\t\t\t\t\tctrl.$setViewValue(newValue);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tscope.open = function($event) {\n\t\t\t\t$event.preventDefault();\n\t\t\t\t$event.stopPropagation();\n\t\t\t\tscope.opened = true;\n\t\t\t};\n\n\t\t\t(function init() {\n\t\t\t\tif (scope.minuteStep === undefined) {\n\t\t\t\t\tscope.minuteStep = 1;\n\t\t\t\t}\n\t\t\t\tif (scope.showSpinners === undefined) {\n\t\t\t\t\tscope.showSpinners = true;\n\t\t\t\t}\n\t\t\t}());\n\t\t}\n\t};\n}]);","src/dd-datepicker/dd-datepicker.js":"(function () {\n    'use strict';\n\n    angular.module('dd.ui.dd-datepicker', ['ui.bootstrap'])\n        .constant('days', ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'])\n        .directive('ddDatepicker', DatepickerDirective)\n        .service('datepickerParserService', datepickerParserService)\n        .provider('datepickerConfig', datepickerConfigProvider);\n\n    var KEY_ENTER = 13, KEY_UP = 38, KEY_DOWN = 40;\n\n    DatepickerDirective.$inject = ['$timeout', 'dateFilter', 'datepickerParserService', 'days', 'datepickerConfig'];\n    function DatepickerDirective($timeout, dateFilter, datepickerParserService, days, datepickerConfig) {\n\n        var directive = {\n            restrict: 'EA',\n            require: 'ngModel',\n            replace: true,\n            templateUrl: function (element, attrs) {\n                return attrs.templateUrl || 'template/dd-datepicker/dd-datepicker.html';\n            },\n            scope: {\n                ngModel: '=',\n                minuteStep: '=?',\n                showSpinners: '=?',\n                showMeridian: '=?',\n                ngDisabled: '=?',\n                ngRequired: '=?',\n                dateDisabled: '&',\n                showDayName: '=?',\n                placeholder: '@?',\n                popupPlacement: '@?'\n            },\n            link: function (scope, element, attrs, ctrl) {\n\n                var input = angular.element(element.find('.display-input'));\n                var canUpdateDisplayModel = true;\n                var canExecuteNgModelChanges = true;\n\n                scope.dayName = null;\n                scope.dateFormat = attrs.dateFormat || datepickerConfig.dateFormat;\n                scope.dateOptions = attrs.dateOptions || angular.copy(datepickerConfig.dateOptions);\n                scope.useShortDateFormat = scope.dateFormat.length < 6;\n\n                scope.dateOptions.dateDisabled = scope.dateDisabled;\n\n                scope.calendarOpened = false;\n                scope.openCalendar = openCalendar;\n                scope.name = attrs.name;\n\n                ctrl.$formatters.push(function (value) {\n                    init(value);\n                    return value;\n                });\n\n                scope.$watch('calendarOpened', function (newValue, oldValue) {\n                    if (!newValue && oldValue) {\n                        onCalendarClosed();\n                        input.focus();\n                    }\n                });\n\n                scope.$on('ddDatepicker:sync', function (event, args) {\n                    scope.ngModel = args.model;\n                });\n\n                scope.$on('ddDatepicker:setDate', function (event, args) {\n                    var validatedDate = datepickerParserService.validateWithDisabledDate(args.date, scope.dateDisabled);\n                    setDate(validatedDate);\n                    $timeout(updateDisplayModel, 0);\n                });\n\n                input.on('blur', function () {\n                    if (isDateChanged()) {\n                        parseUserInput();\n                        updateDisplayModel();\n                    }\n                });\n\n                input.on('keydown keypress', function (event) {\n                    if (event.altKey) {\n                        return;\n                    } else if (event.which === KEY_ENTER && !scope.displayModel) {\n                        changeDate(0);\n                        event.preventDefault();\n                    } else if (event.which === KEY_UP) {\n                        changeDate(1);\n                        event.preventDefault();\n                    } else if (event.which === KEY_DOWN) {\n                        changeDate(-1);\n                        event.preventDefault();\n                    }\n                });\n\n                function init(model) {\n                    ctrl.$modelValue = model;\n                    updateDisplayModel();\n                    updateDayLabel();\n                    syncBootstrapDateModel();\n                }\n\n                function isDateChanged() {\n                    var inputVal = input.val();\n                    if (!scope.ngModel && !inputVal) {\n                        return false;\n                    }\n\n                    if (scope.ngModel && inputVal && dateFilter(scope.ngModel, scope.dateFormat) === inputVal) {\n                        return false;\n                    }\n\n                    return true;\n                }\n\n                function onCalendarClosed() {\n                    if (scope.bootstrapDateModel) {\n                        var validatedDate = datepickerParserService.validateWithDisabledDate(scope.bootstrapDateModel, scope.dateDisabled);\n                        updateMainModel(validatedDate);\n                        if (canUpdateDisplayModel) {\n                            updateDisplayModel(validatedDate);\n                        }\n                        syncBootstrapDateModel();\n                    } else {\n                        updateMainModel(null);\n                        updateDisplayModel(null);\n                    }\n                }\n\n                function parseUserInput() {\n                    var parsedDate = datepickerParserService.parse(scope.displayModel, scope.dateFormat, scope.dateDisabled, ctrl.$modelValue);\n                    setDate(parsedDate);\n                }\n\n                function changeDate(delta) {\n                    var parsedDate = scope.displayModel ? datepickerParserService.parse(scope.displayModel, scope.dateFormat, scope.dateDisabled, ctrl.$modelValue) : new Date();\n                    datepickerParserService.changeDate(parsedDate, delta);\n                    var validatedDate = datepickerParserService.validateWithDisabledDate(parsedDate, scope.dateDisabled);\n                    setDate(validatedDate);\n                    $timeout(updateDisplayModel, 0);\n                }\n\n                function setDate(date) {\n                    // chek if date is 'indvalid date' and make it null for consistency\n                    if (!angular.isUndefined(date) && date !== null && isNaN(date.getDate())) {\n                        date = null;\n                    }\n\n                    updateMainModel(date);\n                    syncBootstrapDateModel();\n                }\n\n                function openCalendar($event) {\n                    $event.preventDefault();\n                    $event.stopPropagation();\n                    scope.calendarOpened = true;\n                }\n\n                function syncBootstrapDateModel() {\n                    scope.bootstrapDateModel = angular.copy(ctrl.$modelValue);\n                }\n\n                function updateDisplayModel() {\n                    canUpdateDisplayModel = true;\n                    scope.displayModel = ctrl.$modelValue ? dateFilter(ctrl.$modelValue, scope.dateFormat) : null;\n                }\n\n                function updateMainModel(date) {\n                    canExecuteNgModelChanges = false;\n                    ctrl.$setViewValue(date);\n                    ctrl.$render();\n                    updateDayLabel();\n                    $timeout(function () {\n                        canExecuteNgModelChanges = true;\n                    }, 100);\n                }\n\n                function updateDayLabel() {\n                    if (scope.showDayName) {\n                        if (!ctrl.$modelValue) {\n                            scope.dayName = null;\n                        } else {\n                            scope.dayName = days[ctrl.$modelValue.getDay()];\n                        }\n                    }\n                }\n            }\n        };\n\n        return directive;\n    }\n\n    datepickerParserService.$inject = ['uibDateParser'];\n    function datepickerParserService(uibDateParser) {\n        var self = this;\n\n        var mmDdPattern = /^(0?[1-9]|1[012])[-\\/\\s.]?(0?[1-9]|[12][0-9]|3[01])$/,\n            mmDdFormatPattern = /(MM?)[-\\/\\s.](dd?)/,\n            datePartsPattern = /^(\\d\\d?)[-\\/\\s.]?(\\d\\d?)$/;\n\n        self.parse = parse;\n        self.changeDate = changeDate;\n        self.validateWithDisabledDate = validateWithDisabledDate;\n\n        function parse(input, format, dateDisabled, time) {\n            var parsedDate = parseInternal(input, format);\n\n            if (!parsedDate) {\n                return null;\n            }\n            if (dateDisabled) {\n                parsedDate = validateWithDisabledDate(parsedDate, dateDisabled);\n            }\n\n            if (time && parsedDate) {\n                parsedDate.setHours(time.getHours(), time.getMinutes(), 0, 0);\n            }\n\n            return parsedDate || null;\n        }\n\n        function changeDate(currentDate, delta) {\n            if (!currentDate) {\n                return;\n            }\n\n            var day = currentDate.getDate() + delta;\n            currentDate.setDate(day);\n        }\n\n        function validateWithDisabledDate(parsedDate, dateDisabled) {\n            var disabled = dateDisabled({ date: parsedDate, mode: 'day' });\n            if (disabled) {\n                return null;\n            }\n\n            return parsedDate;\n        }\n\n        // private\n\n        function parseInternal(input, format) {\n            var useMmDdPattern = mmDdFormatPattern.test(format);\n\n            if (!useMmDdPattern) {\n                input = reversToMmDdFormat(input);\n            }\n\n            if (mmDdPattern.test(input)) {\n                return buildNewDate(input);\n            }\n\n            return uibDateParser.parse(input, format);\n        }\n\n        function buildNewDate(input) {\n            var tokens = tokenize(input),\n                year = new Date().getFullYear(),\n                month = parseInt(tokens[1], 10) - 1,\n                day = parseInt(tokens[2], 10);\n\n            return new Date(year, month, day);\n        }\n\n        function reversToMmDdFormat(input) {\n            return input.replace(datePartsPattern, '$2-$1');\n        }\n\n        function tokenize(input) {\n            return mmDdPattern.exec(input);\n        }\n    }\n\n    function datepickerConfigProvider() {\n        var config = {\n            dateFormat: 'yyyy-MM-dd',\n            dateOptions: {\n                startingDay: 1\n            }\n        };\n\n        this.setDateFormat = function (value) {\n            config.dateFormat = value;\n        };\n\n        this.setDateOptions = function (dateOptions) {\n            config.dateOptions = dateOptions;\n        };\n\n        this.$get = function () {\n            return config;\n        };\n    }\n\n})();","src/dd-datetimepicker/dd-datetimepicker.js":"angular.module('dd.ui.dd-datetimepicker', ['ui.bootstrap'])\n    .directive('ddDatetimepicker', ['$timeout', function ($timeout) {\n        return {\n            restrict: 'EA',\n            require: 'ngModel',\n            templateUrl: function (element, attrs) {\n                return attrs.templateUrl || 'template/dd-datetimepicker/dd-datetimepicker.html';\n            },\n            scope: {\n                ngModel: '=',\n                minuteStep: '=?',\n                showMeridian: '=?',\n                ngDisabled: '=?',\n                ngRequired: '=?',\n                dateDisabled: '&',\n                dateFormat: '@',\n                showDayName: '=?',\n                allowForwardDateAdjustment: '=?',\n                datePlaceholder: '@?',\n                timePlaceholder: '@?',\n                popupPlacement: '@?'\n            },\n            link: function (scope, element, attrs, ctrl) {\n\n                var timeChanged = false;\n                var timepickerBlurEventFired = false;\n\n                scope.time = null;\n                scope.date = null;\n                scope.name = attrs.name;\n                \n                ctrl.$formatters.push(function(value) {\n                    init(value);\n                    return value;\n                });\n\n                scope.$watch('date', function (newTime, oldTime) {\n                    if (scope.ngModel !== newTime) {\n                        updateMainModel();\n                        setValidity();\n                    }\n                });\n\n                scope.$watch('time', function (newTime, oldTime) {\n\n                    if (scope.ngModel !== newTime) {\n                        timeChanged = true;\n                        \n                        updateMainModel();\n                        setValidity();\n                        adjustDate(newTime, oldTime);\n\n                        timepickerBlurEventFired = false;\n                    }\n                });\n\n                scope.onTimeBlur = function () {\n                    timepickerBlurEventFired = true;\n                };\n\n                function updateMainModel() {\n                    \n                    ensureDateTypes();\n                    var model = angular.copy(scope.date);\n                    if (model && scope.time) {\n                        model.setHours(scope.time.getHours(), scope.time.getMinutes(), 0, 0);\n                    }\n\n                    ctrl.$setViewValue(model);\n                }\n\n                function init(model) {\n                    ctrl.$modelValue = model;\n                    scope.time = ctrl.$modelValue;\n                    scope.date = ctrl.$modelValue;\n                }\n\n                function ensureDateTypes() {\n                    if (scope.date && !(scope.date instanceof Date)) {\n                        scope.date = new Date(scope.date);\n                    }\n                    if (scope.time && !(scope.time instanceof Date)) {\n                        scope.time = new Date(scope.time);\n                    }\n                }\n\n                function setValidity() {\n                    if (scope.ngRequired && (!scope.time || !scope.date)) {\n                        ctrl.$setValidity('required', false);\n                    } else {\n                        ctrl.$setValidity('required', true);\n                    }\n                }\n\n                function adjustDate(newTime, oldTime) {\n                    if (!newTime || !oldTime || !scope.ngModel || timepickerBlurEventFired) {\n                        return;\n                    }\n\n                    newTime = new Date(newTime);\n                    oldTime = new Date(oldTime);\n\n                    var hoursDelta = newTime.getHours() - oldTime.getHours();\n\n                    if (hoursDelta === -23) {\n                        adjustDateByDay(1);\n                    } else if (hoursDelta === 23) {\n                        adjustDateByDay(-1);\n                    }\n                }\n\n                function adjustDateByDay(delta) {\n                    var dateToSet = new Date(scope.ngModel.getTime());\n                    var day = dateToSet.getDate() + delta;\n                    dateToSet.setDate(day);\n\n                    scope.$broadcast('ddDatepicker:setDate', { date: dateToSet });\n\n                    notifyAboutDatepickerChange();\n                }\n\n                function notifyAboutDatepickerChange() {\n                    var datepickerElement = element.find('.datepicker-container .display-input');\n                    datepickerElement.css('background-color', 'rgba(0, 128, 0, 0.15)');\n                    $timeout(function () {\n                        datepickerElement.css('background-color', '');\n                    }, 500);\n                }\n\n                function syncDatepickerModel() {\n                    scope.$broadcast('ddDatepicker:sync', { model: ctrl.$modelValue });\n                }\n\n                function sameDay(d1, d2) {\n                    return d1.getYear() === d2.getYear() &&\n                        d1.getMonth() === d2.getMonth() &&\n                        d1.getDate() === d2.getDate();\n                }\n            }\n        };\n    }]);","src/dd-timepicker/dd-timepicker.js":"(function () {\n    'use strict';\n\n    angular.module('dd.ui.dd-timepicker', [])\n        .directive('ddTimepicker', TimepickerDirective)\n        .service('timeparserService', timeparserService);\n\n    var KEY_ENTER = 13, KEY_UP = 38, KEY_DOWN = 40;\n    \n    TimepickerDirective.$inject = ['$timeout', 'timeparserService'];\n    function TimepickerDirective($timeout, timeparserService) {\n\n        var directive = {\n            restrict: 'A',\n            require: 'ngModel',\n            replace: true,\n            scope: {\n                ngModel: '=',\n                onChange: '&',\n                minuteStep: '=?',\n                isDateType: '=?'\n            },\n            link: function (scope, element, attrs, ctrl) {\n                \n                var dateTime = scope.isDateType && scope.ngModel instanceof Date ? scope.ngModel : new Date();\n                var canUpdateNgModel = false;\n                var lastActionFromArrowKey = false;\n\n                scope.minuteStep = scope.minuteStep || 1;\n\n                ctrl.$parsers.push(function (value) {\n                    value = canUpdateNgModel ? timeparserService.toModel(value, scope.isDateType, dateTime) : scope.ngModel;\n                    canUpdateNgModel = false;\n                    return value || null;\n                });\n\n                ctrl.$formatters.push(function (value) {\n                    canUpdateNgModel = false;\n                    return timeparserService.toView(value);\n                });\n\n                element.on('keydown keypress', function (event) {\n                    if (event.altKey) {\n                        return;\n                    } else if (event.which === KEY_ENTER && !ctrl.$viewValue) {\n                        updateModelOnKeypress(event, 0, timeparserService.getFormattedTime());\n                    } else if (event.which === KEY_UP) {\n                        updateModelOnKeypress(event, scope.minuteStep);\n                    } else if (event.which === KEY_DOWN) {\n                        updateModelOnKeypress(event, -scope.minuteStep);\n                    }\n                });\n\n                element.on('blur', function toModelTime() {\n                    if (isValueChanged()) {\n                        canUpdateNgModel = true;\n                        scope.ngModel = timeparserService.toModel(ctrl.$viewValue, scope.isDateType, dateTime);\n                        updateViewValue(timeparserService.toView(scope.ngModel));\n                        applyOnChange();\n                    }\n\n                    if (lastActionFromArrowKey) {\n                        lastActionFromArrowKey = false;\n                        applyOnChange();\n                    }\n                });\n\n                function updateViewValue(value) {\n                    ctrl.$setViewValue(value);\n                    ctrl.$render();\n                }\n\n                function updateModelOnKeypress(event, delta, customDate) {\n                    canUpdateNgModel = lastActionFromArrowKey = true;\n                    updateViewValue(customDate || timeparserService.changeTime(scope.ngModel, delta));\n                    event.preventDefault();\n                }\n\n                function isValueChanged() {\n                    return ctrl.$viewValue !== timeparserService.toView(scope.ngModel);\n                }\n                \n                function applyOnChange() {\n                    if (scope.onChange) {\n                        $timeout(scope.onChange);\n                    }\n                }\n            }\n        };\n\n        return directive;\n\n    }\n\n    timeparserService.$inject = ['dateFilter'];\n    function timeparserService(dateFilter) {\n        var self = this;\n\n        var amPmPattern = /^(\\d+)(a|p)$/,\n            normalTimePattern = /^([0-9]|0[0-9]|1[0-9]|2[0-3])[.:][0-5][0-9]$/,\n            digitsPattern = /^[0-9]+$/;\n\n        self.toModel = toModel;\n        self.toView = toView;\n        self.changeTime = changeTime;\n        self.getFormattedTime = getFormattedTime;\n\n        function toModel(input, isDateModel, dateTime) {\n\n            var parsedTime = null;\n\n            if (!input) {\n                return null;\n            }\n\n            if (normalTimePattern.test(input)) {\n                parsedTime = parseNormalTime(input);\n                return parsedTimeToModel(parsedTime, isDateModel, dateTime);\n            }\n\n            input = prepareInput(input);\n\n            if (amPmPattern.test(input)) {\n                parsedTime = parseAmPmTime(input, amPmPattern);\n                return parsedTimeToModel(parsedTime, isDateModel, dateTime);\n            }\n\n            if (digitsPattern.test(input)) {\n                parsedTime = parseDigitsTime(input, digitsPattern);\n                return parsedTimeToModel(parsedTime, isDateModel, dateTime);\n            }\n\n            return null;\n        }\n\n        function toView(input) {\n            if (input instanceof Date) {\n                return getFormattedTime(input);\n            }\n            return input;\n        }\n\n        function changeTime(modelValue, delta) {\n            var timeInfo = getTimeInfoFromString(prepareInput(modelValue));\n\n            var date = new Date();\n            date.setHours(timeInfo.hours);\n            date.setMinutes(timeInfo.minutes + delta);\n\n            return dateFilter(date, 'HH:mm');\n        }\n\n        function getFormattedTime(dateInstance) {\n            var date = dateInstance || new Date();\n            return dateFilter(date, 'HH:mm');\n        }\n\n        //private\n\n        function parsedTimeToModel(parsedTime, isDateModel, dateTime) {\n\n            if (!parsedTime) {\n                return null;\n            }\n\n            if (isDateModel) {\n                var tokens = parsedTime.split(':');\n                dateTime.setHours(parseInt(tokens[0], 10));\n                dateTime.setMinutes(parseInt(tokens[1], 10));\n                return new Date(dateTime);\n            }\n\n            return parsedTime;\n        }\n\n        function parseAmPmTime(input, pattern) {\n            var tokens = tokenize(input, pattern),\n                timeInfo = getTimeInfoFromString(tokens[1], tokens[2]);\n\n            return validateParsedTime(timeInfoToString(timeInfo));\n        }\n\n        function parseDigitsTime(input) {\n            var timeInfo = getTimeInfoFromString(input, null);\n            return validateParsedTime(timeInfoToString(timeInfo));\n        }\n\n        function parseNormalTime(input) {\n            input = prepareInput(input);\n            var timeInfo = getTimeInfoFromString(input, null);\n            return timeInfoToString(timeInfo);\n        }\n\n        function tokenize(input, pattern) {\n            return pattern.exec(input);\n        }\n\n        function getTimeInfoFromString(inputTime, mode) {\n\n            inputTime = inputTime.replace(/^0/, '');\n\n            var val = parseInt(inputTime, 10),\n                hours = 0,\n                minutes = 0;\n\n            //user enter only minutes (mm)\n            if (inputTime[0] === '0') {\n                minutes = parseInt(inputTime, 10);\n            }\n            //user enter only hour (H)\n            else if (val <= 24 && inputTime.length <= 2) {\n                hours = val;\n            }\n            // user enter hour and minutes (H:mm)\n            else if (val > 24 && val <= 999) {\n                hours = parseInt(inputTime[0], 10);\n                minutes = parseInt(inputTime.substr(1, 3), 10);\n            }\n            // user enter hours and minutes (HH:mm)\n            else if (val > 24 && val <= 9999) {\n                hours = parseInt(inputTime.substr(0, 2), 10);\n                minutes = parseInt(inputTime.substr(2, 4), 10);\n            }\n\n            if (mode === 'p' && hours !== 12) {\n                hours += 12;\n            } else if (mode === 'a' && hours === 12) {\n                hours = 0;\n            }\n\n            return {\n                hours: hours,\n                minutes: minutes\n            };\n        }\n\n        function validateParsedTime(input) {\n            if (normalTimePattern.test(input)) {\n                return input;\n            }\n            return null;\n        }\n\n        function prepareInput(input) {\n            if (input instanceof Date) {\n                input = dateFilter(input, 'HH:mm');\n            }\n            if (!input) {\n                input = '00:00';\n            }\n            return input.trim().toLowerCase().replace('.', '').replace(':', '');\n        }\n\n        function timePartToString(part) {\n            return part < 10 ? '0' + part : part.toString();\n        }\n\n        function timeInfoToString(timeInfo) {\n            return timePartToString(timeInfo.hours) + ':' + timePartToString(timeInfo.minutes);\n        }\n    }\n\n})();","src/form-actions/form-actions.js":"(function () {\n    'use strict';\n\n    angular\n        .module('dd.ui.form-actions', [])\n        .directive('formActions', formActions);\n\n    function formActions() {\n        return {\n            require: '^form',\n            transclude: true,\n            templateUrl: function (element, attrs) {\n                return attrs.templateUrl || 'template/form-actions/form-actions.html';\n            },\n            link: function link(scope, element, attrs, formCtrl) {\n                scope.form = formCtrl;\n\n                if (attrs.appendTo) {\n                    var appendToElement = document.querySelector(attrs.appendTo);\n                    if (appendToElement === null) {\n                        throw new Error('append-to element do not exsist');\n                    }\n\n                    var size = calculateAppendToElementSize(appendToElement);\n                    var actionBar = element[0].querySelector('.fixed-form-actions-bar');\n                    actionBar.style.transform = 'translateX('+ size +'%)';\n                }\n            },\n            restrict: 'E'\n        };\n    }\n\n    function calculateAppendToElementSize(appendToElement) {\n        return 100 - appendToElement.offsetWidth * 100 / window.innerWidth;\n    }\n})();","src/form-validation/form-validation.js":"(function () {\n    'use strict';\n\n    angular\n        .module('dd.ui.form-validation', [])\n        .directive('showErrors', showErrors)\n        .service('formValidationService', formValidationService);\n\n\n    showErrors.$inject = ['$timeout'];\n\n    function showErrors($timeout) {\n        var linkFn = function (scope, el, attrs, formCtrl) {\n            $timeout(function () {\n                var blurred, inputEl, inputName, inputNgEl, options;\n                blurred = false;\n                options = scope.$eval(attrs.showErrors);\n                inputEl = el[0].querySelector('[name]:not(div)');\n                inputNgEl = angular.element(inputEl);\n                inputName = inputNgEl.attr('name');\n\n                if (!inputName) {\n                    throw new Error('show-errors element has no child input elements with a \\'name\\' attribute');\n                }\n\n                inputNgEl.bind('blur', function () {\n                    blurred = true;\n                    return toggleClasses(formCtrl[inputName].$invalid);\n                });\n\n                scope.$watch(function () {\n                    return formCtrl[inputName] && formCtrl[inputName].$invalid;\n                }, function (invalid) {\n                    if (!blurred) {\n                        return;\n                    }\n                    return toggleClasses(invalid);\n                });\n\n                scope.$on(formCtrl.$name + '-show-errors-check-validity', function () {\n                    return toggleClasses(formCtrl[inputName].$invalid);\n                });\n\n                scope.$on(formCtrl.$name + '-show-errors-reset', function () {\n                    return $timeout(function () {\n                        el.removeClass('has-error');\n                        return blurred = false;\n                    }, 0, false);\n                });\n\n                function toggleClasses(invalid) {\n                    el.toggleClass('has-error', invalid);\n                }\n            });\n        };\n\n        return {\n            restrict: 'A',\n            require: '^form',\n            priority: -100,\n            compile: function (elem, attrs) {\n                if (!elem.hasClass('form-group')) {\n                    throw new Error('show-errors element does not have the \\'form-group\\' class');\n                }\n                return linkFn;\n            }\n        };\n    }\n\n    formValidationService.$inject = ['$rootScope'];\n    function formValidationService($rootScope) {\n        this.showErrors = function(formName) {\n            $rootScope.$broadcast(formName + '-show-errors-check-validity');\n        };\n\n        this.hideErrors = function(formName) {\n            $rootScope.$broadcast(formName + '-show-errors-reset');\n        };\n    }\n\n})();","src/lookup/lookup.js":"angular.module('dd.ui.lookup', ['ui.bootstrap'])\n.directive('ddLookup', ['$http', '$timeout', '$q', function ($http, $timeout, $q) {\n    return {\n        restrict: 'EA',\n        require: 'ngModel',\n        scope: {\n            ngModel: '=',\n            url: '=?',\n            lookupParams: '=?',\n            lookupFormat: '&',\n            ngDisabled: '=?',\n            lookupOnSelect: '&',\n            lookupOnClear: '&',\n            lookupResponseTransform: '&',\n            lookupDataProvider: '&',\n            lookupGrouping: '=?',\n            lookupMinLength: '=?'\n        },\n        templateUrl: function (element, attrs) {\n            return attrs.templateUrl || 'template/lookup/lookup.html';\n        },\n        link: function ($scope, element, attrs, ctrl) {\n            $scope.isBusy = false;\n            \n            /* --------------- typeahead extension --------------- */\n            \n            var typeaheadInput = element.find('input');\n            var typeaheadNgModelCtrl = typeaheadInput.controller('ngModel');\n            \n            // clear no results on blur\n            typeaheadInput.on('blur', function() {\n               $scope.noResults = false; \n            });\n                       \n            typeaheadNgModelCtrl.$parsers.unshift(function(inputValue) {                \n               if (inputValue.length === 0) {\n                   // clear no results label on input clear\n                   $scope.noResults = false;\n                   \n                   // notify that lookup value has been cleared\n                   $timeout($scope.lookupOnClear);\n               }\n               return inputValue;\n            });\n            \n            /* --------------- read-only attributes --------------- */\n\n            $scope.placeholder = attrs.placeholder;\n            $scope.inputClass = attrs.lookupInputClass;\n\n            if (attrs.lookupAddon) {\n                var addonContainer = angular.element('<span class=\"input-group-addon\"></span>');\n                addonContainer.append(angular.element(attrs.lookupAddon));\n                var inputGroup = element.find('.input-group');\n                inputGroup.prepend(addonContainer);\n\n                var width = addonContainer.outerWidth();\n                var noResults = element.find('.lookup-no-results');\n                noResults.css('margin-left', width);\n\n                $timeout(function() {\n                    var dropdown = element.find('.dropdown-menu');\n                    dropdown.css('width', 'calc(100% - ' + width + 'px)');\n                });\n            }\n\n            /* --------------- scope functions --------------- */\n\n            $scope.getItems = function(query) {\n                var dataPromise = null;\n                if($scope.url) {\n                    dataPromise = getHttpItems(query).then(function(response) { return response.data; });\n                } else if ($scope.lookupDataProvider) {\n                    dataPromise = $q.when($scope.lookupDataProvider({ $query: query }));\n                }\n                \n                if (!dataPromise) {\n                    return null;\n                }\n                \n                $scope.isBusy = true;\n                return dataPromise.then(function (result) {\n                    $scope.isBusy = false;\n                    ctrl.$setDirty(true);\n                    \n                    if (attrs.lookupResponseTransform) {\n                        result = $scope.lookupResponseTransform({ $response: result });\n                    }\n                    \n                    if (attrs.lookupGrouping) {\n                        result = applyGrouping(result);    \n                    }\n                                                                                                    \n                    return result;\n                }, function () {\n                    $scope.isBusy = false;\n                });\n            };\n\n            $scope.clear = function () {\n                if ($scope.ngDisabled) {\n                    return;\n                }\n\n                $scope.ngModel = null;\n                element.find('input').val('');\n                ctrl.$setDirty(true);\n                $scope.noResults = false;\n                $timeout($scope.lookupOnClear);\n            };\n\n            $scope.getLabel = function (item) {\n                if (!item) {\n                    return null;\n                }\n\n                var label;\n                if (attrs.lookupFormat) {\n                    label = $scope.lookupFormat({$item: item});\n                } else {\n                    label = item.name;\n                }\n\n                return label;\n            };\n\n            $scope.onSelect = function($item, $model, $label) {\n                ctrl.$setDirty(true);\n                $timeout($scope.lookupOnSelect);\n            };\n            \n            function applyGrouping(data) {\n                var propertyName = $scope.lookupGrouping || 'group';\n                var grouped = data ? data.reduce(function(prev, curr) {\n                    curr.lookupGroup = curr[propertyName] || 'Other';\n                    \n                    if (!prev[curr.lookupGroup]) {\n                        prev[curr.lookupGroup] = [];\n                        curr.firstInGroup = true;\n                    }\n\n                    prev[curr.lookupGroup].push(curr);\n                                        \n                    return prev;\n                }, {}) : null;\n                \n                var result = [];\n                for(var group in grouped) {\n                    if ({}.hasOwnProperty.call(grouped, group)) {\n                        result = result.concat(grouped[group]);\n                    }                    \n                }\n                return result;\n            }\n            \n            function getHttpItems(query) {\n                var requestParams = $scope.lookupParams || {};\n                requestParams.query = query;\n                \n                if(angular.isUndefined(requestParams.limit)){\n                    requestParams.limit = 10;\n                }\n                \n                return $http({ method: 'GET', url: $scope.url, params: requestParams });                    \n            }\n        }\n    };\n}]);\n","src/validation/phone.js":"﻿var PHONE_REGEXP = /^\\+\\d{10,14}$/;\nvar PHONE_COUNTRY_CODE_REGEXP = /^\\+\\d{1,3}$/;\nvar PHONE_WO_COUNTRY_CODE_REGEXP = /^\\d{7,13}$/;\nangular.module('dd.ui.validation.phone', [])\n\n// directive to validate phone number with country code\n.directive('phone', function () {\n    return {\n        require: 'ngModel',\n        link: function (scope, elm, attrs, ctrl) {\n\n            ctrl.$parsers.unshift(validate);\n            ctrl.$formatters.unshift(validate);\n\n            function validate(viewValue) {\n                if (!viewValue && viewValue !== '') {\n                    return viewValue;\n                }\n\n                if (viewValue === '' || PHONE_REGEXP.test(viewValue)) {\n                    ctrl.$setValidity('phone', true);\n                } else {\n                    ctrl.$setValidity('phone', false);\n                }\n                return viewValue;\n            }\n        }\n    };\n})\n\n// directive to validate phone number country code only\n.directive('phoneCountryCode', function () {\n    return {\n        require: 'ngModel',\n        link: function (scope, elm, attrs, ctrl) {\n\n            ctrl.$parsers.unshift(validate);\n            ctrl.$formatters.unshift(validate);\n\n            function validate(viewValue) {\n                if (!viewValue && viewValue !== '') {\n                    return viewValue;\n                }\n\n                if (viewValue === '' || PHONE_COUNTRY_CODE_REGEXP.test(viewValue)) {\n                    ctrl.$setValidity('phoneCountryCode', true);\n                } else {\n                    ctrl.$setValidity('phoneCountryCode', false);\n                }\n                return viewValue;\n            }\n        }\n    };\n})\n\n// directive to validate phone number without country code\n.directive('phoneWoCountryCode', function () {\n    return {\n        require: 'ngModel',\n        link: function (scope, elm, attrs, ctrl) {\n\n            ctrl.$parsers.unshift(validate);\n            ctrl.$formatters.unshift(validate);\n\n            function validate(viewValue) {\n                if (!viewValue && viewValue !== '') {\n                    return viewValue;\n                }\n\n                if (viewValue === '' || PHONE_WO_COUNTRY_CODE_REGEXP.test(viewValue)) {\n                    ctrl.$setValidity('phoneWoCountryCode', true);\n                } else {\n                    ctrl.$setValidity('phoneWoCountryCode', false);\n                }\n                return viewValue;\n            }\n        }\n    };\n});\n","src/validation/sameAs.js":"// copy-paste from http://jsfiddle.net/jaredwilli/77NLB/\n\nangular.module('dd.ui.validation.sameAs', [])\n\n.directive('sameAs', function() {\n  return {\n    require: 'ngModel',\n    link: function(scope, elm, attrs, ctrl) {\n\n      ctrl.$parsers.unshift(validate);\n      ctrl.$formatters.unshift(validate);\n\n      scope.$watch('sameAs', function() {\n        validate(ctrl.$modelValue);\n      });\n\n      function validate(viewValue) {\n        var eth = scope.sameAs;\n\n        if (!eth) {\n          return viewValue;\n        }\n\n        if (viewValue === eth) {\n          ctrl.$setValidity('sameAs', true);\n          return viewValue;\n        }\n        \n        ctrl.$setValidity('sameAs', false);\n        return undefined;\n      }\n    },\n    scope: {\n      sameAs: '='\n    }\n  };\n});\n","src/validation/validation.js":"angular.module('dd.ui.validation', ['dd.ui.validation.phone', 'dd.ui.validation.sameAs']);\n","template/busy-element/busy-element.html.js":"angular.module(\"template/busy-element/busy-element.html\", []).run([\"$templateCache\", function($templateCache) {\n  $templateCache.put(\"template/busy-element/busy-element.html\",\n    \"<div class=\\\"be-container\\\" style=\\\"margin-left: -{{ marginLeft }}; margin-top: -{{ marginTop }}\\\">\\n\" +\n    \"    <div class=\\\"be-overlay\\\" ng-show=\\\"busy\\\" style=\\\"width: {{ width }}px; height: {{ height }}px; line-height: {{ height }}px\\\">\\n\" +\n    \"        <img src=\\\"https://drivr.com/img/spinner.gif\\\" />\\n\" +\n    \"    </div>\\n\" +\n    \"    <div class=\\\"be-overlay be-animate\\\" ng-show=\\\"status\\\" ng-class=\\\"statusClass\\\" style=\\\"width: {{ width }}px; height: {{ height }}px\\\"></div>\\n\" +\n    \"</div>\");\n}]);\n","template/datetimepicker/datetimepicker.html.js":"angular.module(\"template/datetimepicker/datetimepicker.html\", []).run([\"$templateCache\", function($templateCache) {\n  $templateCache.put(\"template/datetimepicker/datetimepicker.html\",\n    \"<div class=\\\"form-inline\\\">\\n\" +\n    \"\t<div class=\\\"form-group timepicker-container\\\">\\n\" +\n    \"\t\t<div uib-timepicker\\n\" +\n    \"\t\t\tng-model=\\\"time\\\"\\n\" +\n    \"\t\t\tng-disabled=\\\"ngDisabled\\\"\\n\" +\n    \"\t\t\tshow-meridian=\\\"showMeridian\\\"\\n\" +\n    \"\t\t\tminute-step=\\\"minuteStep\\\"\\n\" +\n    \"\t\t\tng-change=\\\"timeChange()\\\"\\n\" +\n    \"\t\t\tshow-spinners=\\\"showSpinners\\\">\\n\" +\n    \"\t\t</div>\\n\" +\n    \"\t</div>\\n\" +\n    \"\t<div class=\\\"form-group datepicker-container\\\">\\n\" +\n    \"\t\t<input class=\\\"form-control datepicker-input\\\" type=\\\"text\\\" style=\\\"width: 100px\\\"\\n\" +\n    \"\t\t\t\tuib-datepicker-popup\\n\" +\n    \"\t\t\t\tng-click=\\\"open($event)\\\"\\n\" +\n    \"\t\t\t\tng-change=\\\"dateChange($event)\\\"\\n\" +\n    \"\t\t\t\tis-open=\\\"opened\\\"\\n\" +\n    \"\t\t\t\tng-model=\\\"ngModel\\\"\\n\" +\n    \"\t\t\t\tng-disabled=\\\"ngDisabled\\\"\t\t\t\t\\n\" +\n    \"\t\t\t\tdate-disabled=\\\"dateDisabled({date: date, mode: mode})\\\"\\n\" +\n    \"\t\t\t\tclose-text=\\\"Close\\\"\\n\" +\n    \"\t\t\t\tpopup-placement=\\\"{{popupPlacement}}\\\"\\n\" +\n    \"\t\t\t\tshow-weeks=\\\"showWeeks\\\" />\\n\" +\n    \"\t</div>\\n\" +\n    \"</div>\");\n}]);\n","template/dd-datepicker/dd-datepicker.html.js":"angular.module(\"template/dd-datepicker/dd-datepicker.html\", []).run([\"$templateCache\", function($templateCache) {\n  $templateCache.put(\"template/dd-datepicker/dd-datepicker.html\",\n    \"<div class=\\\"input-group dd-datepicker\\\">\\n\" +\n    \"    <input class=\\\"form-control display-input datepicker-input\\\"\\n\" +\n    \"           type=\\\"text\\\"\\n\" +\n    \"           name=\\\"{{name}}\\\"\\n\" +\n    \"           placeholder=\\\"{{placeholder}}\\\"\\n\" +\n    \"           ng-class=\\\"{'short': useShortDateFormat}\\\"\\n\" +\n    \"           ng-disabled=\\\"ngDisabled\\\"\\n\" +\n    \"           ng-required=\\\"ngRequired\\\"\\n\" +\n    \"           ng-model=\\\"displayModel\\\" />\\n\" +\n    \"           \\n\" +\n    \"    <div class=\\\"input-group-btn\\\">\\n\" +\n    \"        <div type=\\\"text\\\"\\n\" +\n    \"           class=\\\"datepicker-input\\\" \\n\" +\n    \"           uib-datepicker-popup=\\\"{{dateFormat}}\\\"\\n\" +\n    \"           ng-model=\\\"bootstrapDateModel\\\"\\n\" +\n    \"           is-open=\\\"calendarOpened\\\"\\n\" +\n    \"           date-disabled=\\\"dateDisabled({date: date, mode: mode})\\\"\\n\" +\n    \"           datepicker-options=\\\"dateOptions\\\"\\n\" +\n    \"           close-text=\\\"Close\\\"\\n\" +\n    \"           popup-placement=\\\"{{popupPlacement}}\\\"\\n\" +\n    \"           show-weeks=\\\"showWeeks\\\"></div>\\n\" +\n    \"        <button ng-disabled=\\\"ngDisabled\\\" \\n\" +\n    \"                type=\\\"button\\\" \\n\" +\n    \"                class=\\\"btn btn-default open-calendar-btn\\\" \\n\" +\n    \"                ng-click=\\\"openCalendar($event)\\\"\\n\" +\n    \"                ng-class=\\\"{'calendar-btn-with-day':showDayName}\\\">\\n\" +\n    \"                <i class=\\\"glyphicon glyphicon-calendar\\\"></i>\\n\" +\n    \"        </button>\\n\" +\n    \"    </div>\\n\" +\n    \"    \\n\" +\n    \"    <div ng-if=\\\"showDayName\\\" class=\\\"input-group-addon day-name-label\\\">{{dayName}}</span>\\n\" +\n    \"\\n\" +\n    \"</div>\\n\" +\n    \"\");\n}]);\n","template/dd-datetimepicker/dd-datetimepicker.html.js":"angular.module(\"template/dd-datetimepicker/dd-datetimepicker.html\", []).run([\"$templateCache\", function($templateCache) {\n  $templateCache.put(\"template/dd-datetimepicker/dd-datetimepicker.html\",\n    \"<div class=\\\"dd-datetimepicker\\\">\\n\" +\n    \"\t<div class=\\\"input-group timepicker-container\\\">\\n\" +\n    \"         <span class=\\\"input-group-addon\\\"><span class=\\\"glyphicon glyphicon-time\\\"></span></span>\\n\" +\n    \"         <input class=\\\"form-control timepicker-input\\\" \\n\" +\n    \"                dd-timepicker\\n\" +\n    \"                placeholder=\\\"{{timePlaceholder}}\\\"\\n\" +\n    \"                is-date-type=\\\"true\\\"\\n\" +\n    \"                type=\\\"text\\\"\\n\" +\n    \"                ng-blur=\\\"onTimeBlur()\\\"\\n\" +\n    \"                ng-disabled=\\\"ngDisabled\\\"\\n\" +\n    \"                ng-required=\\\"ngRequired\\\"\\n\" +\n    \"                minute-step=\\\"minuteStep\\\"\\n\" +\n    \"                ng-model=\\\"time\\\" />\\n\" +\n    \"\t</div>\\n\" +\n    \"\t<div class=\\\"input-group datepicker-container\\\">\\n\" +\n    \"        <div dd-datepicker\\n\" +\n    \"               placeholder=\\\"{{datePlaceholder}}\\\"\\n\" +\n    \"               ng-disabled=\\\"ngDisabled\\\"\\n\" +\n    \"               ng-required=\\\"ngRequired\\\"\\n\" +\n    \"               date-format=\\\"{{::dateFormat}}\\\"\\n\" +\n    \"               ng-model=\\\"date\\\"\\n\" +\n    \"               name=\\\"{{name}}\\\"\\n\" +\n    \"               show-day-name=\\\"showDayName\\\"\\n\" +\n    \"               close-text=\\\"Close\\\"\\n\" +\n    \"               popup-placement=\\\"{{popupPlacement}}\\\"\\n\" +\n    \"               date-disabled=\\\"dateDisabled({date: date, mode: mode})\\\">\\n\" +\n    \"        </div>\\n\" +\n    \"\t</div>\\n\" +\n    \"</div>\");\n}]);\n","template/form-actions/form-actions.html.js":"angular.module(\"template/form-actions/form-actions.html\", []).run([\"$templateCache\", function($templateCache) {\n  $templateCache.put(\"template/form-actions/form-actions.html\",\n    \"<div ng-show=\\\"form.$dirty\\\" class=\\\"fixed-form-actions-bar\\\">\\n\" +\n    \"    <div ng-transclude></div>\\n\" +\n    \"</div>\");\n}]);\n","template/lookup/lookup-item.html.js":"angular.module(\"template/lookup/lookup-item.html\", []).run([\"$templateCache\", function($templateCache) {\n  $templateCache.put(\"template/lookup/lookup-item.html\",\n    \"<div class=\\\"typeahead-group-header\\\" ng-if=\\\"match.model.firstInGroup\\\">{{match.model.lookupGroup}}</div>\\n\" +\n    \"<a href tabindex=\\\"-1\\\" ng-bind-html=\\\"match.label | uibTypeaheadHighlight:query\\\" ng-attr-title=\\\"{{match.label}}\\\">\\n\" +\n    \"</a>\");\n}]);\n","template/lookup/lookup.html.js":"angular.module(\"template/lookup/lookup.html\", []).run([\"$templateCache\", function($templateCache) {\n  $templateCache.put(\"template/lookup/lookup.html\",\n    \"<div class=\\\"lookup-container\\\" ng-cloak>\\n\" +\n    \"  <div class=\\\"input-group\\\">\\n\" +\n    \"    <input type=\\\"text\\\"\\n\" +\n    \"           ng-model=\\\"ngModel\\\"\\n\" +\n    \"           autocomplete=\\\"off\\\"\\n\" +\n    \"           uib-typeahead=\\\"d as getLabel(d) for d in getItems($viewValue)\\\"\\n\" +\n    \"           typeahead-on-select=\\\"onSelect($item, $model, $label)\\\"\\n\" +\n    \"           typeahead-editable=\\\"false\\\"\\n\" +\n    \"           typeahead-no-results=\\\"noResults\\\"\\n\" +\n    \"           typeahead-template-url=\\\"template/lookup/lookup-item.html\\\"\\n\" +\n    \"           typeahead-wait-ms=\\\"300\\\"\\n\" +\n    \"           typeahead-min-length=\\\"lookupMinLength\\\"\\n\" +\n    \"           ng-disabled=\\\"ngDisabled\\\"\\n\" +\n    \"           placeholder=\\\"{{placeholder}}\\\"\\n\" +\n    \"           class=\\\"form-control {{inputClass}}\\\" />\\n\" +\n    \"    <span class=\\\"lookup-legend\\\">\\n\" +\n    \"      <div class=\\\"lookup-icon\\\" ng-show=\\\"!isBusy\\\"></div>\\n\" +\n    \"      <div class=\\\"spinner-icon\\\" ng-show=\\\"isBusy\\\"></div>\\n\" +\n    \"    </span>\\n\" +\n    \"    <a class=\\\"lookup-clear\\\" ng-click=\\\"clear()\\\" tabindex=\\\"-1\\\" ng-class=\\\"{ 'disabled' : ngDisabled }\\\">\\n\" +\n    \"      <div class=\\\"clear-icon\\\" tooltip=\\\"Clear\\\" tooltip-append-to-body=\\\"true\\\"></div>\\n\" +\n    \"    </a>\\n\" +\n    \"    <div ng-show=\\\"noResults\\\" class=\\\"lookup-no-results\\\">\\n\" +\n    \"      <span class=\\\"detail\\\"><i class=\\\"glyphicon glyphicon-remove\\\"></i> No results found</span>\\n\" +\n    \"    </div>\\n\" +\n    \"  </div>\\n\" +\n    \"</div>\\n\" +\n    \"\");\n}]);\n"}}