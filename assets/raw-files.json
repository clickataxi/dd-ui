{"banner":"/*\n * dd-ui\n * http://clickataxi.github.io/dd-ui/\n\n * Version: 0.8.6 - 2016-09-12\n * License: MIT\n */","cssBanner":"/* Include this file in your html if you are using the CSP mode. */\n\n","files":{"src/arrow-key-nav/arrow-key-nav.js":"angular.module('dd.ui.arrow-key-nav', [])\r\n    .directive('ddArrowKeyNav', ['$document', function ($document) {\r\n        return {\r\n            restrict: 'EA',\r\n            link: function ($scope, containerElement, attrs, ctrl) {\r\n                var className = 'arrow-key-nav';\r\n                containerElement.on('keydown', function (event) {\r\n                    if (attrs.arrowKeyModifier) {\r\n                        if (!event[attrs.arrowKeyModifier.toLowerCase() + 'Key']) {\r\n                            return;\r\n                        }\r\n                    }\r\n                    if (event.keyCode === 38) {\r\n                        event.preventDefault();\r\n                        navigateUp();\r\n                    }\r\n                    else if (event.keyCode === 40) {\r\n                        event.preventDefault();\r\n                        navigateDown();\r\n                    }\r\n                });\r\n                function navigateUp() {\r\n                    var prevElement = getNextElement(true);\r\n                    if (prevElement) {\r\n                        prevElement.focus();\r\n                    }\r\n                }\r\n                function navigateDown() {\r\n                    var nextElement = getNextElement();\r\n                    if (nextElement) {\r\n                        nextElement.focus();\r\n                    }\r\n                }\r\n                function getNextElement(reverse) {\r\n                    if (reverse === void 0) { reverse = undefined; }\r\n                    var focusableElements = getFocusableElements();\r\n                    if (reverse) {\r\n                        focusableElements.reverse();\r\n                    }\r\n                    var currentIndex = focusableElements ? focusableElements.indexOf($document[0].activeElement) : -1;\r\n                    if (currentIndex !== -1) {\r\n                        var next = focusableElements.slice(currentIndex + 1).find(isNavigatableElement);\r\n                        if (!next) {\r\n                            next = focusableElements.slice(0, currentIndex).find(isNavigatableElement);\r\n                        }\r\n                        return next;\r\n                    }\r\n                }\r\n                function isNavigatableElement(element) {\r\n                    return $(element).hasClass(className);\r\n                }\r\n                function getFocusableElements() {\r\n                    return $(containerElement).find('*').filter(function (index, el) {\r\n                        return isFocusable(el);\r\n                    }).toArray();\r\n                }\r\n                function isFocusable(element) {\r\n                    var jElement = $(element);\r\n                    var nodeName = element.nodeName.toLowerCase(), tabIndex = jElement.attr('tabindex');\r\n                    return !element.disabled &&\r\n                        jElement.attr('disabled') !== 'disabled' &&\r\n                        !jElement.hasClass('disabled') &&\r\n                        (/input|select|textarea|button|object/.test(nodeName) ?\r\n                            true :\r\n                            nodeName === 'a' || nodeName === 'area' ?\r\n                                element.href || !isNaN(tabIndex) :\r\n                                !isNaN(tabIndex)) &&\r\n                        !jElement.is(':hidden');\r\n                }\r\n            }\r\n        };\r\n    }]);\r\n//# sourceMappingURL=arrow-key-nav.js.map","src/busy-element/busy-element.js":"angular.module('dd.ui.busy-element', [])\r\n    .directive('busyElement', ['$parse', '$timeout', '$rootScope', function ($parse, $timeout, $rootScope) {\r\n        return {\r\n            restrict: 'EA',\r\n            replace: true,\r\n            templateUrl: 'template/busy-element/busy-element.html',\r\n            scope: {\r\n                busy: '=?',\r\n                status: '=?',\r\n                timeout: '=?'\r\n            },\r\n            link: function (scope, element, attr) {\r\n                updateSize();\r\n                scope.$watch('status', function () {\r\n                    updateSize();\r\n                    if (scope.status !== undefined) {\r\n                        scope.busy = false;\r\n                        scope.statusClass = scope.status;\r\n                        if (scope.timeout !== 0) {\r\n                            $timeout(function () {\r\n                                scope.status = null;\r\n                            }, scope.timeout ? scope.timeout : 500);\r\n                        }\r\n                    }\r\n                });\r\n                function updateSize() {\r\n                    var container = attr.busyElement ? angular.element(attr.busyElement) : element.parent();\r\n                    var offset = container.offset();\r\n                    element.offset(offset);\r\n                    scope.width = container.innerWidth();\r\n                    scope.height = container.innerHeight();\r\n                    scope.marginLeft = container.css('padding-left');\r\n                    scope.marginTop = container.css('padding-top');\r\n                }\r\n            }\r\n        };\r\n    }]);\r\n//# sourceMappingURL=busy-element.js.map","src/conversion/conversion.js":"// copy-paste from https://gist.github.com/letanure/4a81adfbda16b52d25ed\r\n(function () {\r\n    'use strict';\r\n    angular.module('dd.ui.conversion', [])\r\n        .filter('localizedDistance', ['conversionService', function (conversionService) {\r\n            return function (distance, unit, precision) {\r\n                if (unit === 'm') {\r\n                    if (conversionService.isMetric()) {\r\n                        return distance + ' m';\r\n                    }\r\n                    return conversionService.convert(distance, 'm', 'yd', precision) + ' yd';\r\n                }\r\n                if (unit === 'km') {\r\n                    if (conversionService.isMetric()) {\r\n                        return distance + ' km';\r\n                    }\r\n                    return conversionService.convert(distance, 'km', 'mi', precision) + ' mi';\r\n                }\r\n                throw new Error('Unit ' + unit + ' conversion not supported');\r\n            };\r\n        }])\r\n        .service('conversionService', [function () {\r\n            var self = this;\r\n            var unitSystem = 'metric';\r\n            var units = ['km', 'm', 'cm', 'mm', 'nm', 'mi', 'yd', 'ft', 'in'];\r\n            var factors = [1, 1000, 100000, 1000000, 1000000000000, 0.621371192237334, 1093.6132983377078745, 3280.8398950131236234, 39370.078740157485299];\r\n            var conversionKey = {};\r\n            initDistanceMap();\r\n            self.setUnitSystem = function (value) {\r\n                unitSystem = value;\r\n            };\r\n            self.isMetric = function () {\r\n                return unitSystem === 'metric';\r\n            };\r\n            self.convert = function (distance, from, to, precision) {\r\n                var result = distance * conversionKey[from][to];\r\n                if (angular.isDefined(precision)) {\r\n                    return parseFloat(result.toFixed(precision));\r\n                }\r\n                return result;\r\n            };\r\n            function initDistanceMap() {\r\n                for (var k = 0; k < units.length; k++) {\r\n                    conversionKey[units[k]] = {};\r\n                }\r\n                for (var i = 0; i < units.length; i++) {\r\n                    for (var j = i; j < units.length; j++) {\r\n                        var convFactor;\r\n                        if (i === 0) {\r\n                            convFactor = factors[j];\r\n                        }\r\n                        else if (units[i] === units[j]) {\r\n                            convFactor = 1;\r\n                        }\r\n                        else {\r\n                            convFactor = conversionKey[units[i]][units[0]] * conversionKey[units[0]][units[j]];\r\n                        }\r\n                        conversionKey[units[i]][units[j]] = convFactor;\r\n                        conversionKey[units[j]][units[i]] = 1 / convFactor;\r\n                    }\r\n                }\r\n            }\r\n        }]);\r\n})();\r\n//# sourceMappingURL=conversion.js.map","src/data-list/data-list.js":"var ddui;\r\n(function (ddui) {\r\n    var DataList = (function () {\r\n        function DataList(config, $http, $location) {\r\n            this.$http = $http;\r\n            this.$location = $location;\r\n            this.id = config.id;\r\n            this.rows = [];\r\n            this.selectedRows = [];\r\n            this.count = 0;\r\n            this.page = 1;\r\n            this.data = null; // will be assigned raw last response\r\n            this.filter = { skip: 0, limit: 25 };\r\n            this.paging = config.paging;\r\n            this.selectedAllPages = false;\r\n            this.isLoading = false;\r\n            this.url = config.url;\r\n            this.responseListName = config.responseListName || 'items';\r\n            this.responseCountName = config.responseCountName || 'count';\r\n            this.initFilterFunc = function () { return {}; };\r\n        }\r\n        DataList.prototype.onSuccess = function (callback) {\r\n            this.onListResponseSuccess = callback;\r\n        };\r\n        DataList.prototype.onError = function (callback) {\r\n            this.onListResponseError = callback;\r\n        };\r\n        DataList.prototype.setFilter = function (filterFunc) {\r\n            this.initFilterFunc = filterFunc;\r\n            var filter = this.initFilterFunc();\r\n            if (typeof (filter) !== 'object') {\r\n                throw new Error('initFilterFunc should return object with filter properties');\r\n            }\r\n            angular.extend(this.filter, filter);\r\n            this.loadLocationParams(this.filter);\r\n        };\r\n        DataList.prototype.submitFilter = function () {\r\n            this.setLocationParams(this.filter);\r\n            return this.updateList(this.filter);\r\n        };\r\n        DataList.prototype.resetFilter = function () {\r\n            this.filter = this.initFilterFunc();\r\n            this.setLocationParams(this.filter);\r\n            this.updateList(this.filter);\r\n        };\r\n        DataList.prototype.fetchPage = function (page) {\r\n            if (page === void 0) { page = null; }\r\n            if (page) {\r\n                this.page = page;\r\n            }\r\n            this.filter.skip = (this.page * this.filter.limit) - this.filter.limit;\r\n            this.updateList(this.filter);\r\n        };\r\n        DataList.prototype.syncAll = function () {\r\n            this.filter.skip = 0;\r\n            this.filter.limit = this.rows.length > 0 ? Math.ceil(this.rows.length / this.filter.limit) * this.filter.limit : this.filter.limit;\r\n            this.updateList(this.filter);\r\n        };\r\n        DataList.prototype.loadMore = function () {\r\n            this.filter.skip += this.filter.limit;\r\n            return this.updateList(this.filter);\r\n        };\r\n        DataList.prototype.hasMore = function () {\r\n            return this.rows && this.rows.length < this.count;\r\n        };\r\n        DataList.prototype.selectAll = function () {\r\n            this.selectedAllPages = false;\r\n            for (var _i = 0, _a = this.rows; _i < _a.length; _i++) {\r\n                var row = _a[_i];\r\n                row.$selected = true;\r\n                this.selectedRows.push(row);\r\n            }\r\n        };\r\n        DataList.prototype.deselectAll = function () {\r\n            this.selectedAllPages = false;\r\n            for (var _i = 0, _a = this.rows; _i < _a.length; _i++) {\r\n                var row = _a[_i];\r\n                row.$selected = false;\r\n                this.selectedRows = [];\r\n            }\r\n        };\r\n        DataList.prototype.selectAllPages = function () {\r\n            this.selectAll();\r\n            this.selectedAllPages = true;\r\n        };\r\n        DataList.prototype.toggle = function (row) {\r\n            this.selectedAllPages = false;\r\n            row.$selected = !row.$selected;\r\n            if (row.$selected) {\r\n                this.selectedRows.push(row);\r\n            }\r\n            else {\r\n                var selectedRowIndex = this.selectedRows.indexOf(row);\r\n                this.selectedRows.splice(selectedRowIndex, 1);\r\n            }\r\n        };\r\n        DataList.prototype.updateList = function (filter) {\r\n            var _this = this;\r\n            this.isLoading = true;\r\n            if (typeof (filter.limit) === 'undefined') {\r\n                this.filter.limit = 25;\r\n            }\r\n            if (typeof (filter.skip) === 'undefined') {\r\n                this.filter.skip = 0;\r\n            }\r\n            var config = {\r\n                params: filter\r\n            };\r\n            return this.$http.get(this.url, config)\r\n                .then(function (response) {\r\n                _this.data = response.data;\r\n                _this.count = _this.data[_this.responseCountName];\r\n                _this.updateListCollection(_this.data[_this.responseListName]);\r\n                if (_this.onListResponseSuccess) {\r\n                    _this.onListResponseSuccess(_this.rows, _this.count);\r\n                }\r\n            })\r\n                .catch(function (data) {\r\n                if (_this.onListResponseError) {\r\n                    _this.onListResponseError(data);\r\n                }\r\n            }).finally(function () {\r\n                _this.isLoading = false;\r\n            });\r\n        };\r\n        DataList.prototype.updateListCollection = function (items) {\r\n            if (this.filter.skip === 0 || this.paging) {\r\n                this.rows = items;\r\n            }\r\n            else {\r\n                for (var a = 0; a < items.length; a++) {\r\n                    this.rows.push(items[a]);\r\n                }\r\n            }\r\n        };\r\n        DataList.prototype.loadLocationParams = function (filter) {\r\n            var changedCount = 0;\r\n            for (var param in filter) {\r\n                if (filter.hasOwnProperty(param)) {\r\n                    var val = this.$location.search()[param];\r\n                    if (val) {\r\n                        try {\r\n                            filter[param] = JSON.parse(val);\r\n                            if (DataList.isNumber(filter[param])) {\r\n                                filter[param] = JSON.stringify(filter[param]);\r\n                            }\r\n                        }\r\n                        catch (e) {\r\n                            var isoDatePattern = /(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))/;\r\n                            if (isoDatePattern.test(val)) {\r\n                                filter[param] = new Date(val);\r\n                            }\r\n                            else {\r\n                                filter[param] = val;\r\n                            }\r\n                        }\r\n                        changedCount++;\r\n                    }\r\n                }\r\n            }\r\n            return changedCount;\r\n        };\r\n        DataList.prototype.setLocationParams = function (filter) {\r\n            var params = this.getFilterAsUrlParams(filter, true);\r\n            for (var param in params) {\r\n                if (params.hasOwnProperty(param)) {\r\n                    var val = params[param];\r\n                    if (val && param !== 'expand' && param !== 'skip' && param !== 'limit') {\r\n                        this.$location.search(param, val);\r\n                    }\r\n                    else {\r\n                        this.$location.search(param, null);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        DataList.prototype.getFilterAsUrlParams = function (filter, addNulls) {\r\n            var params = {};\r\n            for (var param in filter) {\r\n                if (filter.hasOwnProperty(param)) {\r\n                    var val = filter[param];\r\n                    if (val instanceof Array) {\r\n                        val = val.join(',');\r\n                    }\r\n                    if (val && (DataList.isNumber(val) || val.length > 0)) {\r\n                        params[param] = val;\r\n                    }\r\n                    else if ((typeof val) === 'boolean') {\r\n                        params[param] = val === true;\r\n                    }\r\n                    else if (val instanceof Date) {\r\n                        params[param] = val.toISOString();\r\n                    }\r\n                    else if (val && (typeof val) === 'object') {\r\n                        params[param] = JSON.stringify(val);\r\n                    }\r\n                    else if (addNulls) {\r\n                        params[param] = null;\r\n                    }\r\n                }\r\n            }\r\n            return params;\r\n        };\r\n        DataList.isNumber = function (n) {\r\n            return !isNaN(parseFloat(n)) && isFinite(n);\r\n        };\r\n        return DataList;\r\n    }());\r\n    ddui.DataList = DataList;\r\n    var DataListManager = (function () {\r\n        function DataListManager($http, $location) {\r\n            this.$http = $http;\r\n            this.$location = $location;\r\n            this.listServiceHash = {};\r\n            this.defaultListId = 'DataList';\r\n        }\r\n        DataListManager.prototype.init = function (config) {\r\n            config.id = config.id || this.defaultListId;\r\n            this.validateInit(config);\r\n            var listService = new DataList(config, this.$http, this.$location);\r\n            this.listServiceHash[config.id] = listService;\r\n            return listService;\r\n        };\r\n        DataListManager.prototype.get = function (id) {\r\n            id = id || this.defaultListId;\r\n            this.validateGet(id);\r\n            return this.listServiceHash[id];\r\n        };\r\n        DataListManager.prototype.validateInit = function (config) {\r\n            if (!config || !config.url) {\r\n                throw new Error('List config url is required');\r\n            }\r\n            if (this.listServiceHash[config.id]) {\r\n                throw new Error(\"List with id \" + config.id + \" is already created\");\r\n            }\r\n        };\r\n        DataListManager.prototype.validateGet = function (id) {\r\n            if (!this.listServiceHash[id]) {\r\n                throw new Error(\"List with id \" + id + \" not found\");\r\n            }\r\n        };\r\n        return DataListManager;\r\n    }());\r\n    ddui.DataListManager = DataListManager;\r\n    angular.module('dd.ui.data-list', [])\r\n        .service('dataListManager', ['$http', '$location', function ($http, $location) {\r\n            return new DataListManager($http, $location);\r\n        }]);\r\n})(ddui || (ddui = {}));\r\n//# sourceMappingURL=data-list.js.map","src/datetimepicker/datetimepicker.js":"angular.module('dd.ui.datetimepicker', ['ui.bootstrap'])\r\n    .directive('datetimepicker', ['$document', function ($document) {\r\n        return {\r\n            restrict: 'EA',\r\n            require: 'ngModel',\r\n            templateUrl: function (element, attrs) {\r\n                return attrs.templateUrl || 'template/datetimepicker/datetimepicker.html';\r\n            },\r\n            scope: {\r\n                ngModel: '=',\r\n                minuteStep: '=?',\r\n                showSpinners: '=?',\r\n                showMeridian: '=?',\r\n                ngDisabled: '=?',\r\n                dateDisabled: '&',\r\n                popupPlacement: '@?'\r\n            },\r\n            link: function (scope, element, attrs, ctrl) {\r\n                var firstTimeAssign = true;\r\n                var timePickerElement = element.children().eq(0).children()[0];\r\n                // hook up a view change listener to fire ng-change\r\n                ctrl.$viewChangeListeners.push(function () {\r\n                    scope.$eval(attrs.ngChange);\r\n                });\r\n                scope.$watch('ngModel', function (newTime) {\r\n                    // if a time element is focused, updating its model will cause hours/minutes to be formatted by padding with leading zeros\r\n                    if (!timePickerElement.contains($document[0].activeElement)) {\r\n                        if (!newTime) {\r\n                            if (firstTimeAssign) {\r\n                                // create a new default time where the hours, minutes, seconds and milliseconds are set to 0.\r\n                                newTime = new Date();\r\n                                newTime.setHours(0, 0, 0, 0);\r\n                            }\r\n                            else {\r\n                                return;\r\n                            }\r\n                        }\r\n                        // Update timepicker (watch on ng-model in timepicker does not use object equality),\r\n                        // also if the ngModel was not a Date, convert it to date\r\n                        newTime = new Date(newTime);\r\n                        scope.time = newTime; // change the time\r\n                        if (firstTimeAssign) {\r\n                            if (!scope.ngModel) {\r\n                                scope.ngModel = new Date(newTime);\r\n                            }\r\n                            firstTimeAssign = false;\r\n                        }\r\n                    }\r\n                }, true);\r\n                scope.dateChange = function () {\r\n                    var time = scope.time;\r\n                    if (scope.ngModel) {\r\n                        scope.ngModel.setHours(time.getHours(), time.getMinutes(), 0, 0);\r\n                        ctrl.$setViewValue(scope.ngModel);\r\n                    }\r\n                };\r\n                scope.timeChange = function () {\r\n                    if (scope.ngModel && scope.time) {\r\n                        if (!(scope.ngModel instanceof Date)) {\r\n                            scope.ngModel = new Date(scope.ngModel);\r\n                        }\r\n                        var newValue = new Date(scope.ngModel);\r\n                        newValue.setHours(scope.time.getHours(), scope.time.getMinutes(), 0, 0);\r\n                        ctrl.$setViewValue(newValue);\r\n                    }\r\n                };\r\n                scope.open = function ($event) {\r\n                    $event.preventDefault();\r\n                    $event.stopPropagation();\r\n                    scope.opened = true;\r\n                };\r\n                (function init() {\r\n                    if (scope.minuteStep === undefined) {\r\n                        scope.minuteStep = 1;\r\n                    }\r\n                    if (scope.showSpinners === undefined) {\r\n                        scope.showSpinners = true;\r\n                    }\r\n                }());\r\n            }\r\n        };\r\n    }]);\r\n//# sourceMappingURL=datetimepicker.js.map","src/dd-datepicker/dd-datepicker.js":"(function () {\r\n    'use strict';\r\n    angular.module('dd.ui.dd-datepicker', ['ui.bootstrap'])\r\n        .constant('days', ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'])\r\n        .directive('ddDatepicker', DatepickerDirective)\r\n        .service('datepickerParserService', datepickerParserService)\r\n        .provider('datepickerConfig', datepickerConfigProvider);\r\n    var KEY_ENTER = 13, KEY_UP = 38, KEY_DOWN = 40;\r\n    DatepickerDirective.$inject = ['$timeout', 'dateFilter', 'datepickerParserService', 'days', 'datepickerConfig'];\r\n    function DatepickerDirective($timeout, dateFilter, datepickerParserService, days, datepickerConfig) {\r\n        var directive = {\r\n            restrict: 'EA',\r\n            require: 'ngModel',\r\n            replace: true,\r\n            templateUrl: function (element, attrs) {\r\n                return attrs.templateUrl || 'template/dd-datepicker/dd-datepicker.html';\r\n            },\r\n            scope: {\r\n                ngModel: '=',\r\n                minuteStep: '=?',\r\n                showSpinners: '=?',\r\n                showMeridian: '=?',\r\n                ngDisabled: '=?',\r\n                ngRequired: '=?',\r\n                dateDisabled: '&',\r\n                showDayName: '=?',\r\n                placeholder: '@?',\r\n                popupPlacement: '@?'\r\n            },\r\n            link: function (scope, element, attrs, ctrl) {\r\n                var input = angular.element(element.find('.display-input'));\r\n                var canUpdateDisplayModel = true;\r\n                var canExecuteNgModelChanges = true;\r\n                scope.dayName = null;\r\n                scope.dateFormat = attrs.dateFormat || datepickerConfig.dateFormat;\r\n                scope.dateOptions = attrs.dateOptions || angular.copy(datepickerConfig.dateOptions);\r\n                scope.useShortDateFormat = scope.dateFormat.length < 6;\r\n                scope.dateOptions.dateDisabled = scope.dateDisabled;\r\n                scope.calendarOpened = false;\r\n                scope.openCalendar = openCalendar;\r\n                scope.name = attrs.name;\r\n                ctrl.$formatters.push(function (value) {\r\n                    init(value);\r\n                    return value;\r\n                });\r\n                scope.$watch('calendarOpened', function (newValue, oldValue) {\r\n                    if (!newValue && oldValue) {\r\n                        onCalendarClosed();\r\n                        input.focus();\r\n                    }\r\n                });\r\n                scope.$on('ddDatepicker:sync', function (event, args) {\r\n                    scope.ngModel = args.model;\r\n                });\r\n                scope.$on('ddDatepicker:setDate', function (event, args) {\r\n                    var validatedDate = datepickerParserService.validateWithDisabledDate(args.date, scope.dateDisabled);\r\n                    setDate(validatedDate);\r\n                    $timeout(updateDisplayModel, 0);\r\n                });\r\n                input.on('blur', function () {\r\n                    if (isDateChanged()) {\r\n                        parseUserInput();\r\n                        updateDisplayModel();\r\n                    }\r\n                });\r\n                input.on('keydown keypress', function (event) {\r\n                    if (event.altKey) {\r\n                        return;\r\n                    }\r\n                    else if (event.which === KEY_ENTER && !scope.displayModel) {\r\n                        changeDate(0);\r\n                        event.preventDefault();\r\n                    }\r\n                    else if (event.which === KEY_UP) {\r\n                        changeDate(1);\r\n                        event.preventDefault();\r\n                    }\r\n                    else if (event.which === KEY_DOWN) {\r\n                        changeDate(-1);\r\n                        event.preventDefault();\r\n                    }\r\n                });\r\n                function init(model) {\r\n                    ctrl.$modelValue = model;\r\n                    updateDisplayModel();\r\n                    updateDayLabel();\r\n                    syncBootstrapDateModel();\r\n                }\r\n                function isDateChanged() {\r\n                    var inputVal = input.val();\r\n                    if (!scope.ngModel && !inputVal) {\r\n                        return false;\r\n                    }\r\n                    if (scope.ngModel && inputVal && dateFilter(scope.ngModel, scope.dateFormat) === inputVal) {\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                }\r\n                function onCalendarClosed() {\r\n                    if (scope.bootstrapDateModel) {\r\n                        var validatedDate = datepickerParserService.validateWithDisabledDate(scope.bootstrapDateModel, scope.dateDisabled);\r\n                        updateMainModel(validatedDate);\r\n                        if (canUpdateDisplayModel) {\r\n                            updateDisplayModel();\r\n                        }\r\n                        syncBootstrapDateModel();\r\n                    }\r\n                    else {\r\n                        updateMainModel(null);\r\n                        updateDisplayModel();\r\n                    }\r\n                }\r\n                function parseUserInput() {\r\n                    var parsedDate = datepickerParserService.parse(scope.displayModel, scope.dateFormat, scope.dateDisabled, ctrl.$modelValue);\r\n                    setDate(parsedDate);\r\n                }\r\n                function changeDate(delta) {\r\n                    var parsedDate = scope.displayModel ? datepickerParserService.parse(scope.displayModel, scope.dateFormat, scope.dateDisabled, ctrl.$modelValue) : new Date();\r\n                    datepickerParserService.changeDate(parsedDate, delta);\r\n                    var validatedDate = datepickerParserService.validateWithDisabledDate(parsedDate, scope.dateDisabled);\r\n                    setDate(validatedDate);\r\n                    $timeout(updateDisplayModel, 0);\r\n                }\r\n                function setDate(date) {\r\n                    // chek if date is 'indvalid date' and make it null for consistency\r\n                    if (!angular.isUndefined(date) && date !== null && isNaN(date.getDate())) {\r\n                        date = null;\r\n                    }\r\n                    updateMainModel(date);\r\n                    syncBootstrapDateModel();\r\n                }\r\n                function openCalendar($event) {\r\n                    $event.preventDefault();\r\n                    $event.stopPropagation();\r\n                    scope.calendarOpened = true;\r\n                }\r\n                function syncBootstrapDateModel() {\r\n                    scope.bootstrapDateModel = angular.copy(ctrl.$modelValue);\r\n                }\r\n                function updateDisplayModel() {\r\n                    canUpdateDisplayModel = true;\r\n                    scope.displayModel = ctrl.$modelValue ? dateFilter(ctrl.$modelValue, scope.dateFormat) : null;\r\n                }\r\n                function updateMainModel(date) {\r\n                    canExecuteNgModelChanges = false;\r\n                    ctrl.$setViewValue(date);\r\n                    ctrl.$render();\r\n                    updateDayLabel();\r\n                    $timeout(function () {\r\n                        canExecuteNgModelChanges = true;\r\n                    }, 100);\r\n                }\r\n                function updateDayLabel() {\r\n                    if (scope.showDayName) {\r\n                        if (!ctrl.$modelValue) {\r\n                            scope.dayName = null;\r\n                        }\r\n                        else {\r\n                            scope.dayName = days[ctrl.$modelValue.getDay()];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        return directive;\r\n    }\r\n    datepickerParserService.$inject = ['uibDateParser'];\r\n    function datepickerParserService(uibDateParser) {\r\n        var self = this;\r\n        var mmDdPattern = /^(0?[1-9]|1[012])[-\\/\\s.]?(0?[1-9]|[12][0-9]|3[01])$/, mmDdFormatPattern = /(MM?)[-\\/\\s.](dd?)/, datePartsPattern = /^(\\d\\d?)[-\\/\\s.]?(\\d\\d?)$/;\r\n        self.parse = parse;\r\n        self.changeDate = changeDate;\r\n        self.validateWithDisabledDate = validateWithDisabledDate;\r\n        function parse(input, format, dateDisabled, time) {\r\n            var parsedDate = parseInternal(input, format);\r\n            if (!parsedDate) {\r\n                return null;\r\n            }\r\n            if (dateDisabled) {\r\n                parsedDate = validateWithDisabledDate(parsedDate, dateDisabled);\r\n            }\r\n            if (time && parsedDate) {\r\n                parsedDate.setHours(time.getHours(), time.getMinutes(), 0, 0);\r\n            }\r\n            return parsedDate || null;\r\n        }\r\n        function changeDate(currentDate, delta) {\r\n            if (!currentDate) {\r\n                return;\r\n            }\r\n            var day = currentDate.getDate() + delta;\r\n            currentDate.setDate(day);\r\n        }\r\n        function validateWithDisabledDate(parsedDate, dateDisabled) {\r\n            var disabled = dateDisabled({ date: parsedDate, mode: 'day' });\r\n            if (disabled) {\r\n                return null;\r\n            }\r\n            return parsedDate;\r\n        }\r\n        // private\r\n        function parseInternal(input, format) {\r\n            var useMmDdPattern = mmDdFormatPattern.test(format);\r\n            if (!useMmDdPattern) {\r\n                input = reversToMmDdFormat(input);\r\n            }\r\n            if (mmDdPattern.test(input)) {\r\n                return buildNewDate(input);\r\n            }\r\n            return uibDateParser.parse(input, format);\r\n        }\r\n        function buildNewDate(input) {\r\n            var tokens = tokenize(input), year = new Date().getFullYear(), month = parseInt(tokens[1], 10) - 1, day = parseInt(tokens[2], 10);\r\n            return new Date(year, month, day);\r\n        }\r\n        function reversToMmDdFormat(input) {\r\n            return input.replace(datePartsPattern, '$2-$1');\r\n        }\r\n        function tokenize(input) {\r\n            return mmDdPattern.exec(input);\r\n        }\r\n    }\r\n    function datepickerConfigProvider() {\r\n        var config = {\r\n            dateFormat: 'yyyy-MM-dd',\r\n            dateOptions: {\r\n                startingDay: 1\r\n            }\r\n        };\r\n        this.setDateFormat = function (value) {\r\n            config.dateFormat = value;\r\n        };\r\n        this.setDateOptions = function (dateOptions) {\r\n            config.dateOptions = dateOptions;\r\n        };\r\n        this.$get = function () {\r\n            return config;\r\n        };\r\n    }\r\n})();\r\n//# sourceMappingURL=dd-datepicker.js.map","src/dd-datetimepicker/dd-datetimepicker.js":"angular.module('dd.ui.dd-datetimepicker', ['ui.bootstrap'])\r\n    .directive('ddDatetimepicker', ['$timeout', function ($timeout) {\r\n        return {\r\n            restrict: 'EA',\r\n            require: 'ngModel',\r\n            templateUrl: function (element, attrs) {\r\n                return attrs.templateUrl || 'template/dd-datetimepicker/dd-datetimepicker.html';\r\n            },\r\n            scope: {\r\n                ngModel: '=',\r\n                minuteStep: '=?',\r\n                showMeridian: '=?',\r\n                ngRequired: '=?',\r\n                ngDisabled: '=?',\r\n                datepickerDisabled: '=?',\r\n                dateDisabled: '&',\r\n                dateFormat: '@',\r\n                showDayName: '=?',\r\n                allowForwardDateAdjustment: '=?',\r\n                datePlaceholder: '@?',\r\n                timePlaceholder: '@?',\r\n                popupPlacement: '@?'\r\n            },\r\n            link: function (scope, element, attrs, ctrl) {\r\n                var timeChanged = false;\r\n                var timepickerBlurEventFired = false;\r\n                scope.time = null;\r\n                scope.date = null;\r\n                scope.name = attrs.name;\r\n                ctrl.$formatters.push(function (value) {\r\n                    init(value);\r\n                    return value;\r\n                });\r\n                scope.$watch('date', function (newTime, oldTime) {\r\n                    if (scope.ngModel !== newTime) {\r\n                        updateMainModel();\r\n                        setValidity();\r\n                    }\r\n                });\r\n                scope.$watch('time', function (newTime, oldTime) {\r\n                    if (scope.ngModel !== newTime) {\r\n                        timeChanged = true;\r\n                        updateMainModel();\r\n                        setValidity();\r\n                        adjustDate(newTime, oldTime);\r\n                        timepickerBlurEventFired = false;\r\n                    }\r\n                });\r\n                scope.onTimeBlur = function () {\r\n                    timepickerBlurEventFired = true;\r\n                };\r\n                function updateMainModel() {\r\n                    ensureDateTypes();\r\n                    var model = angular.copy(scope.date);\r\n                    if (model && scope.time) {\r\n                        model.setHours(scope.time.getHours(), scope.time.getMinutes(), 0, 0);\r\n                    }\r\n                    ctrl.$setViewValue(model);\r\n                }\r\n                function init(model) {\r\n                    ctrl.$modelValue = model;\r\n                    scope.time = ctrl.$modelValue;\r\n                    scope.date = ctrl.$modelValue;\r\n                }\r\n                function ensureDateTypes() {\r\n                    if (scope.date && !(scope.date instanceof Date)) {\r\n                        scope.date = new Date(scope.date);\r\n                    }\r\n                    if (scope.time && !(scope.time instanceof Date)) {\r\n                        scope.time = new Date(scope.time);\r\n                    }\r\n                }\r\n                function setValidity() {\r\n                    if (scope.ngRequired && (!scope.time || !scope.date)) {\r\n                        ctrl.$setValidity('required', false);\r\n                    }\r\n                    else {\r\n                        ctrl.$setValidity('required', true);\r\n                    }\r\n                }\r\n                function adjustDate(newTime, oldTime) {\r\n                    if (!newTime || !oldTime || !scope.ngModel || timepickerBlurEventFired) {\r\n                        return;\r\n                    }\r\n                    newTime = new Date(newTime);\r\n                    oldTime = new Date(oldTime);\r\n                    var hoursDelta = newTime.getHours() - oldTime.getHours();\r\n                    if (hoursDelta === -23) {\r\n                        adjustDateByDay(1);\r\n                    }\r\n                    else if (hoursDelta === 23) {\r\n                        adjustDateByDay(-1);\r\n                    }\r\n                }\r\n                function adjustDateByDay(delta) {\r\n                    var dateToSet = new Date(scope.ngModel.getTime());\r\n                    var day = dateToSet.getDate() + delta;\r\n                    dateToSet.setDate(day);\r\n                    scope.$broadcast('ddDatepicker:setDate', { date: dateToSet });\r\n                    notifyAboutDatepickerChange();\r\n                }\r\n                function notifyAboutDatepickerChange() {\r\n                    var datepickerElement = element.find('.datepicker-container .display-input');\r\n                    datepickerElement.css('background-color', 'rgba(0, 128, 0, 0.15)');\r\n                    $timeout(function () {\r\n                        datepickerElement.css('background-color', '');\r\n                    }, 500);\r\n                }\r\n            }\r\n        };\r\n    }]);\r\n//# sourceMappingURL=dd-datetimepicker.js.map","src/dd-table/dd-table.js":"var ddui;\r\n(function (ddui) {\r\n    function ddTable() {\r\n        return {\r\n            restrict: 'A',\r\n            scope: {\r\n                ddTable: '='\r\n            },\r\n            bindToController: true,\r\n            controllerAs: '$ctrl',\r\n            controller: function () { },\r\n            compile: function (element, attr) {\r\n                element[0].classList.add('table');\r\n                element[0].classList.add('dd-table');\r\n                return function () { };\r\n            }\r\n        };\r\n    }\r\n    function ddPagination() {\r\n        return {\r\n            restrict: 'E',\r\n            scope: {\r\n                totalItems: '=',\r\n                currentPage: '=',\r\n                itemsPerPage: '=',\r\n                onChange: '&'\r\n            },\r\n            template: \"<ul uib-pagination\\n                           total-items=\\\"totalItems\\\" \\n                           ng-model=\\\"currentPage\\\" \\n                           items-per-page=\\\"itemsPerPage\\\" \\n                           class=\\\"dd-pagination pagination-sm\\\" \\n                           boundary-link-numbers=\\\"true\\\">\\n                        </ul>\",\r\n            link: function (scope) {\r\n                scope.$watch('currentPage', function (oldVal, newVal) {\r\n                    if (oldVal !== newVal) {\r\n                        scope.onChange();\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    }\r\n    function ddItemsPerPage() {\r\n        return {\r\n            restrict: 'E',\r\n            scope: {\r\n                limit: '=',\r\n                onChange: '&'\r\n            },\r\n            template: \"<div class=\\\"btn-group pull-right dropup\\\" uib-dropdown keyboard-nav>\\n                            <button type=\\\"button\\\" class=\\\"btn btn-default btn-sm\\\" uib-dropdown-toggle>\\n                                Show {{limit}} results <span class=\\\"caret\\\"></span>\\n                            </button>\\n                            <ul class=\\\"dropdown-menu\\\" uib-dropdown-menu role=\\\"menu\\\" aria-labelledby=\\\"btn-append-to-single-button\\\">\\n                                <li ng-repeat=\\\"value in values\\\" role=\\\"menuitem\\\"><a ng-click=\\\"selectValue(value)\\\" href=\\\"#\\\">{{value}}</a></li>\\n                            </ul>\\n                        </div>\",\r\n            link: function (scope) {\r\n                scope.values = [scope.limit || 25, 50, 100];\r\n                scope.selectValue = function (value) {\r\n                    scope.limit = value;\r\n                };\r\n                scope.$watch('limit', function (oldVal, newVal) {\r\n                    if (oldVal !== newVal) {\r\n                        scope.onChange();\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    }\r\n    function ddPagesSelector() {\r\n        return {\r\n            restrict: 'E',\r\n            require: '^ddTable',\r\n            transclude: true,\r\n            replace: true,\r\n            controller: function () { },\r\n            template: \"<div>\\n                            <div class=\\\"btn-group\\\" uib-dropdown keyboard-nav>\\n                                <button uib-dropdown-toggle class=\\\"btn btn-default btn-xs\\\"><span class=\\\"caret\\\"></span></button>\\n                                <ul class=\\\"dropdown-menu\\\" uib-dropdown-menu ng-transclude>\\n                                </ul>\\n                            </div>\\n                            <span class=\\\"rows-count\\\">{{ddTable.selectedRows.length}}</span>\\n                       </div>\",\r\n            link: function (scope, element, attrs, ctrl) {\r\n                scope.ddTable = ctrl.ddTable;\r\n            }\r\n        };\r\n    }\r\n    function ddPagesSelectorItem() {\r\n        return {\r\n            restrict: 'E',\r\n            require: '^ddPagesSelector',\r\n            transclude: true,\r\n            replace: true,\r\n            scope: {\r\n                onClick: '&'\r\n            },\r\n            template: \"<li><a href=\\\"#\\\" ng-click=\\\"onClick()\\\" ng-transclude></a></li>\"\r\n        };\r\n    }\r\n    angular.module('dd.ui.dd-table', [])\r\n        .directive('ddTable', ddTable)\r\n        .directive('ddPagination', ddPagination)\r\n        .directive('ddItemsPerPage', ddItemsPerPage)\r\n        .directive('ddPagesSelector', ddPagesSelector)\r\n        .directive('ddPagesSelectorItem', ddPagesSelectorItem);\r\n})(ddui || (ddui = {}));\r\n//# sourceMappingURL=dd-table.js.map","src/dd-timepicker/dd-timepicker.js":"(function () {\r\n    'use strict';\r\n    angular.module('dd.ui.dd-timepicker', [])\r\n        .directive('ddTimepicker', TimepickerDirective)\r\n        .service('timeparserService', timeparserService);\r\n    var KEY_ENTER = 13, KEY_UP = 38, KEY_DOWN = 40;\r\n    TimepickerDirective.$inject = ['$timeout', 'timeparserService'];\r\n    function TimepickerDirective($timeout, timeparserService) {\r\n        var directive = {\r\n            restrict: 'A',\r\n            require: 'ngModel',\r\n            replace: true,\r\n            scope: {\r\n                ngModel: '=',\r\n                onChange: '&',\r\n                minuteStep: '=?',\r\n                isDateType: '=?'\r\n            },\r\n            link: function (scope, element, attrs, ctrl) {\r\n                var dateTime = scope.isDateType && scope.ngModel instanceof Date ? scope.ngModel : new Date();\r\n                var canUpdateNgModel = false;\r\n                var lastActionFromArrowKey = false;\r\n                scope.minuteStep = scope.minuteStep || 1;\r\n                ctrl.$parsers.push(function (value) {\r\n                    value = canUpdateNgModel ? timeparserService.toModel(value, scope.isDateType, dateTime) : scope.ngModel;\r\n                    canUpdateNgModel = false;\r\n                    return value || null;\r\n                });\r\n                ctrl.$formatters.push(function (value) {\r\n                    canUpdateNgModel = false;\r\n                    return timeparserService.toView(value);\r\n                });\r\n                element.on('keydown keypress', function (event) {\r\n                    if (event.altKey) {\r\n                        return;\r\n                    }\r\n                    else if (event.which === KEY_ENTER && !ctrl.$viewValue) {\r\n                        updateModelOnKeypress(event, 0, timeparserService.getFormattedTime());\r\n                    }\r\n                    else if (event.which === KEY_UP) {\r\n                        updateModelOnKeypress(event, scope.minuteStep);\r\n                    }\r\n                    else if (event.which === KEY_DOWN) {\r\n                        updateModelOnKeypress(event, -scope.minuteStep);\r\n                    }\r\n                });\r\n                element.on('blur', function toModelTime() {\r\n                    if (isValueChanged()) {\r\n                        canUpdateNgModel = true;\r\n                        scope.ngModel = timeparserService.toModel(ctrl.$viewValue, scope.isDateType, dateTime);\r\n                        updateViewValue(timeparserService.toView(scope.ngModel));\r\n                        applyOnChange();\r\n                    }\r\n                    if (lastActionFromArrowKey) {\r\n                        lastActionFromArrowKey = false;\r\n                        applyOnChange();\r\n                    }\r\n                });\r\n                function updateViewValue(value) {\r\n                    ctrl.$setViewValue(value);\r\n                    ctrl.$render();\r\n                }\r\n                function updateModelOnKeypress(event, delta, customDate) {\r\n                    if (customDate === void 0) { customDate = undefined; }\r\n                    canUpdateNgModel = lastActionFromArrowKey = true;\r\n                    updateViewValue(customDate || timeparserService.changeTime(scope.ngModel, delta));\r\n                    event.preventDefault();\r\n                }\r\n                function isValueChanged() {\r\n                    return ctrl.$viewValue !== timeparserService.toView(scope.ngModel);\r\n                }\r\n                function applyOnChange() {\r\n                    if (scope.onChange) {\r\n                        $timeout(scope.onChange);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        return directive;\r\n    }\r\n    timeparserService.$inject = ['dateFilter'];\r\n    function timeparserService(dateFilter) {\r\n        var self = this;\r\n        var amPmPattern = /^(\\d+)(a|p)$/, normalTimePattern = /^([0-9]|0[0-9]|1[0-9]|2[0-3])[.:][0-5][0-9]$/, digitsPattern = /^[0-9]+$/;\r\n        self.toModel = toModel;\r\n        self.toView = toView;\r\n        self.changeTime = changeTime;\r\n        self.getFormattedTime = getFormattedTime;\r\n        function toModel(input, isDateModel, dateTime) {\r\n            var parsedTime = null;\r\n            if (!input) {\r\n                return null;\r\n            }\r\n            if (normalTimePattern.test(input)) {\r\n                parsedTime = parseNormalTime(input);\r\n                return parsedTimeToModel(parsedTime, isDateModel, dateTime);\r\n            }\r\n            input = prepareInput(input);\r\n            if (amPmPattern.test(input)) {\r\n                parsedTime = parseAmPmTime(input, amPmPattern);\r\n                return parsedTimeToModel(parsedTime, isDateModel, dateTime);\r\n            }\r\n            if (digitsPattern.test(input)) {\r\n                parsedTime = parseDigitsTime(input);\r\n                return parsedTimeToModel(parsedTime, isDateModel, dateTime);\r\n            }\r\n            return null;\r\n        }\r\n        function toView(input) {\r\n            if (input instanceof Date) {\r\n                return getFormattedTime(input);\r\n            }\r\n            return input;\r\n        }\r\n        function changeTime(modelValue, delta) {\r\n            var timeInfo = getTimeInfoFromString(prepareInput(modelValue));\r\n            var date = new Date();\r\n            date.setHours(timeInfo.hours);\r\n            date.setMinutes(timeInfo.minutes + delta);\r\n            return dateFilter(date, 'HH:mm');\r\n        }\r\n        function getFormattedTime(dateInstance) {\r\n            var date = dateInstance || new Date();\r\n            return dateFilter(date, 'HH:mm');\r\n        }\r\n        //private\r\n        function parsedTimeToModel(parsedTime, isDateModel, dateTime) {\r\n            if (!parsedTime) {\r\n                return null;\r\n            }\r\n            if (isDateModel) {\r\n                var tokens = parsedTime.split(':');\r\n                dateTime.setHours(parseInt(tokens[0], 10));\r\n                dateTime.setMinutes(parseInt(tokens[1], 10));\r\n                return new Date(dateTime);\r\n            }\r\n            return parsedTime;\r\n        }\r\n        function parseAmPmTime(input, pattern) {\r\n            var tokens = tokenize(input, pattern), timeInfo = getTimeInfoFromString(tokens[1], tokens[2]);\r\n            return validateParsedTime(timeInfoToString(timeInfo));\r\n        }\r\n        function parseDigitsTime(input) {\r\n            var timeInfo = getTimeInfoFromString(input, null);\r\n            return validateParsedTime(timeInfoToString(timeInfo));\r\n        }\r\n        function parseNormalTime(input) {\r\n            input = prepareInput(input);\r\n            var timeInfo = getTimeInfoFromString(input, null);\r\n            return timeInfoToString(timeInfo);\r\n        }\r\n        function tokenize(input, pattern) {\r\n            return pattern.exec(input);\r\n        }\r\n        function getTimeInfoFromString(inputTime, mode) {\r\n            if (mode === void 0) { mode = undefined; }\r\n            inputTime = inputTime.replace(/^0/, '');\r\n            var val = parseInt(inputTime, 10), hours = 0, minutes = 0;\r\n            if (inputTime[0] === '0') {\r\n                minutes = parseInt(inputTime, 10);\r\n            }\r\n            else if (val <= 24 && inputTime.length <= 2) {\r\n                hours = val;\r\n            }\r\n            else if (val > 24 && val <= 999) {\r\n                hours = parseInt(inputTime[0], 10);\r\n                minutes = parseInt(inputTime.substr(1, 3), 10);\r\n            }\r\n            else if (val > 24 && val <= 9999) {\r\n                hours = parseInt(inputTime.substr(0, 2), 10);\r\n                minutes = parseInt(inputTime.substr(2, 4), 10);\r\n            }\r\n            if (mode === 'p' && hours !== 12) {\r\n                hours += 12;\r\n            }\r\n            else if (mode === 'a' && hours === 12) {\r\n                hours = 0;\r\n            }\r\n            return {\r\n                hours: hours,\r\n                minutes: minutes\r\n            };\r\n        }\r\n        function validateParsedTime(input) {\r\n            if (normalTimePattern.test(input)) {\r\n                return input;\r\n            }\r\n            return null;\r\n        }\r\n        function prepareInput(input) {\r\n            if (input instanceof Date) {\r\n                input = dateFilter(input, 'HH:mm');\r\n            }\r\n            if (!input) {\r\n                input = '00:00';\r\n            }\r\n            return input.trim().toLowerCase().replace('.', '').replace(':', '');\r\n        }\r\n        function timePartToString(part) {\r\n            return part < 10 ? '0' + part : part.toString();\r\n        }\r\n        function timeInfoToString(timeInfo) {\r\n            return timePartToString(timeInfo.hours) + ':' + timePartToString(timeInfo.minutes);\r\n        }\r\n    }\r\n})();\r\n//# sourceMappingURL=dd-timepicker.js.map","src/form-actions/form-actions.js":"(function () {\r\n    'use strict';\r\n    angular\r\n        .module('dd.ui.form-actions', [])\r\n        .directive('formActions', formActions);\r\n    function formActions() {\r\n        return {\r\n            require: '^form',\r\n            transclude: true,\r\n            templateUrl: function (element, attrs) {\r\n                return attrs.templateUrl || 'template/form-actions/form-actions.html';\r\n            },\r\n            link: function link(scope, element, attrs, formCtrl) {\r\n                scope.form = formCtrl;\r\n                if (attrs.absolute) {\r\n                    var actionBar = element[0].querySelector('.form-actions-bar');\r\n                    actionBar.style.position = 'absolute';\r\n                }\r\n                if (attrs.parentContainer) {\r\n                    var container = angular.element(document.querySelector(attrs.parentContainer));\r\n                    scope.$watch('form.$dirty', function (newValue) {\r\n                        if (newValue) {\r\n                            container.addClass('form-actions-visible');\r\n                        }\r\n                        else {\r\n                            container.removeClass('form-actions-visible');\r\n                        }\r\n                    });\r\n                }\r\n            },\r\n            restrict: 'E'\r\n        };\r\n    }\r\n})();\r\n//# sourceMappingURL=form-actions.js.map","src/form-validation/form-validation.js":"(function () {\r\n    'use strict';\r\n    angular\r\n        .module('dd.ui.form-validation', [])\r\n        .directive('showErrors', showErrors)\r\n        .service('formValidationService', formValidationService);\r\n    showErrors.$inject = ['$timeout'];\r\n    function showErrors($timeout) {\r\n        var linkFn = function (scope, el, attrs, formCtrl) {\r\n            var blurred, inputNgEl, ngModelElement, ngModelCtrl;\r\n            $timeout(function () {\r\n                if (attrs.custom) {\r\n                    initCustomWatches();\r\n                }\r\n                else {\r\n                    initInputElementWatches();\r\n                }\r\n                function toggleClasses(invalid) {\r\n                    el.toggleClass('has-error', invalid);\r\n                }\r\n                function initInputElementWatches() {\r\n                    blurred = false;\r\n                    inputNgEl = angular.element(findInputElement(el[0]));\r\n                    ngModelElement = angular.element(el[0].querySelector('[ng-model][name]'));\r\n                    ngModelCtrl = ngModelElement ? ngModelElement.controller('ngModel') : null;\r\n                    if (!ngModelCtrl) {\r\n                        throw new Error('show-errors input control element should have [ng-model] and [name]');\r\n                    }\r\n                    if (inputNgEl) {\r\n                        inputNgEl.bind('blur', function () {\r\n                            blurred = true;\r\n                            return toggleClasses(ngModelCtrl.$invalid);\r\n                        });\r\n                    }\r\n                    scope.$watch(function () {\r\n                        return ngModelCtrl && ngModelCtrl.$invalid;\r\n                    }, function (invalid) {\r\n                        if (!blurred) {\r\n                            return;\r\n                        }\r\n                        return toggleClasses(invalid);\r\n                    });\r\n                    scope.$on(formCtrl.$name + '-show-errors-check-validity', function () {\r\n                        return toggleClasses(ngModelCtrl.$invalid);\r\n                    });\r\n                    scope.$on(formCtrl.$name + '-show-errors-reset', function () {\r\n                        return $timeout(function () {\r\n                            el.removeClass('has-error');\r\n                            return blurred = false;\r\n                        }, 0, false);\r\n                    });\r\n                }\r\n                function initCustomWatches() {\r\n                    scope.$watch(function () {\r\n                        return attrs.showErrors;\r\n                    }, function (options) {\r\n                        if (angular.isDefined(options)) {\r\n                            var invalid = scope.$eval(options);\r\n                            return toggleClasses(invalid);\r\n                        }\r\n                    });\r\n                }\r\n                function findInputElement(group) {\r\n                    return group.querySelector('input, textarea, select');\r\n                }\r\n            });\r\n        };\r\n        return {\r\n            restrict: 'A',\r\n            require: '^form',\r\n            priority: -100,\r\n            compile: function (elem, attrs) {\r\n                if (!elem.hasClass('form-fields-group')) {\r\n                    elem.addClass('form-fields-group');\r\n                }\r\n                return linkFn;\r\n            }\r\n        };\r\n    }\r\n    formValidationService.$inject = ['$rootScope'];\r\n    function formValidationService($rootScope) {\r\n        this.showErrors = function (formName) {\r\n            $rootScope.$broadcast(formName + '-show-errors-check-validity');\r\n        };\r\n        this.hideErrors = function (formName) {\r\n            $rootScope.$broadcast(formName + '-show-errors-reset');\r\n        };\r\n    }\r\n})();\r\n//# sourceMappingURL=form-validation.js.map","src/lookup/lookup.js":"angular.module('dd.ui.lookup', ['ui.bootstrap'])\r\n    .directive('ddLookup', ['$http', '$timeout', '$q', function ($http, $timeout, $q) {\r\n        return {\r\n            restrict: 'EA',\r\n            require: 'ngModel',\r\n            scope: {\r\n                ngModel: '=',\r\n                url: '=?',\r\n                lookupParams: '=?',\r\n                lookupFormat: '&',\r\n                ngDisabled: '=?',\r\n                placeholder: '@?',\r\n                lookupOnSelect: '&',\r\n                lookupOnClear: '&',\r\n                lookupResponseTransform: '&',\r\n                lookupDataProvider: '&',\r\n                lookupGrouping: '=?',\r\n                lookupMinLength: '=?'\r\n            },\r\n            templateUrl: function (element, attrs) {\r\n                return attrs.templateUrl || 'template/lookup/lookup.html';\r\n            },\r\n            link: function ($scope, element, attrs, ctrl) {\r\n                $scope.isBusy = false;\r\n                /* --------------- typeahead extension --------------- */\r\n                var typeaheadInput = element.find('input');\r\n                // clear no results on blur\r\n                typeaheadInput.on('blur', function () {\r\n                    $scope.noResults = false;\r\n                });\r\n                $scope.$watch('ngModel', function (newVal, oldVal) {\r\n                    if (!newVal && oldVal) {\r\n                        // clear no results label on input clear\r\n                        $scope.noResults = false;\r\n                        // notify that lookup value has been cleared\r\n                        $timeout($scope.lookupOnClear);\r\n                    }\r\n                });\r\n                /* --------------- read-only attributes --------------- */\r\n                $scope.inputClass = attrs.lookupInputClass;\r\n                if (attrs.lookupAddon) {\r\n                    var addonContainer = angular.element('<span class=\"input-group-addon\"></span>');\r\n                    addonContainer.append(angular.element(attrs.lookupAddon));\r\n                    var inputGroup = element.find('.input-group');\r\n                    inputGroup.prepend(addonContainer);\r\n                    var width = addonContainer.outerWidth();\r\n                    var noResults = element.find('.lookup-no-results');\r\n                    noResults.css('margin-left', width);\r\n                    $timeout(function () {\r\n                        var dropdown = element.find('.dropdown-menu');\r\n                        dropdown.css('width', 'calc(100% - ' + width + 'px)');\r\n                    });\r\n                }\r\n                /* --------------- scope functions --------------- */\r\n                $scope.getItems = function (query) {\r\n                    var dataPromise = null;\r\n                    if ($scope.url) {\r\n                        dataPromise = getHttpItems(query).then(function (response) { return response.data; });\r\n                    }\r\n                    else if ($scope.lookupDataProvider) {\r\n                        dataPromise = $q.when($scope.lookupDataProvider({ $query: query }));\r\n                    }\r\n                    if (!dataPromise) {\r\n                        return null;\r\n                    }\r\n                    $scope.isBusy = true;\r\n                    return dataPromise.then(function (result) {\r\n                        $scope.isBusy = false;\r\n                        ctrl.$setDirty(true);\r\n                        if (attrs.lookupResponseTransform) {\r\n                            result = $scope.lookupResponseTransform({ $response: result });\r\n                        }\r\n                        if (attrs.lookupGrouping) {\r\n                            result = applyGrouping(result);\r\n                        }\r\n                        return result;\r\n                    }, function () {\r\n                        $scope.isBusy = false;\r\n                    });\r\n                };\r\n                $scope.clear = function () {\r\n                    if ($scope.ngDisabled) {\r\n                        return;\r\n                    }\r\n                    $scope.ngModel = null;\r\n                    element.find('input').val('');\r\n                    ctrl.$setDirty(true);\r\n                };\r\n                $scope.getLabel = function (item) {\r\n                    if (!item) {\r\n                        return null;\r\n                    }\r\n                    var label;\r\n                    if (attrs.lookupFormat) {\r\n                        label = $scope.lookupFormat({ $item: item });\r\n                    }\r\n                    else {\r\n                        label = item.name;\r\n                    }\r\n                    return label;\r\n                };\r\n                $scope.onSelect = function ($item, $model, $label) {\r\n                    ctrl.$setDirty(true);\r\n                    $timeout($scope.lookupOnSelect);\r\n                };\r\n                function applyGrouping(data) {\r\n                    var propertyName = $scope.lookupGrouping || 'group';\r\n                    var grouped = data ? data.reduce(function (prev, curr) {\r\n                        curr.lookupGroup = curr[propertyName] || 'Other';\r\n                        if (!prev[curr.lookupGroup]) {\r\n                            prev[curr.lookupGroup] = [];\r\n                            curr.firstInGroup = true;\r\n                        }\r\n                        prev[curr.lookupGroup].push(curr);\r\n                        return prev;\r\n                    }, {}) : null;\r\n                    var result = [];\r\n                    for (var group in grouped) {\r\n                        if ({}.hasOwnProperty.call(grouped, group)) {\r\n                            result = result.concat(grouped[group]);\r\n                        }\r\n                    }\r\n                    return result;\r\n                }\r\n                function getHttpItems(query) {\r\n                    var requestParams = $scope.lookupParams || {};\r\n                    requestParams.query = query;\r\n                    if (angular.isUndefined(requestParams.limit)) {\r\n                        requestParams.limit = 10;\r\n                    }\r\n                    return $http({ method: 'GET', url: $scope.url, params: requestParams });\r\n                }\r\n            }\r\n        };\r\n    }]);\r\n//# sourceMappingURL=lookup.js.map","src/validation/phone.js":"var PHONE_REGEXP = /^\\+\\d{10,14}$/;\r\nvar PHONE_COUNTRY_CODE_REGEXP = /^\\+\\d{1,3}$/;\r\nvar PHONE_WO_COUNTRY_CODE_REGEXP = /^\\d{7,13}$/;\r\nangular.module('dd.ui.validation.phone', [])\r\n    .directive('phone', function () {\r\n    return {\r\n        require: 'ngModel',\r\n        link: function (scope, elm, attrs, ctrl) {\r\n            ctrl.$parsers.unshift(validate);\r\n            ctrl.$formatters.unshift(validate);\r\n            function validate(viewValue) {\r\n                if (!viewValue && viewValue !== '') {\r\n                    return viewValue;\r\n                }\r\n                if (viewValue === '' || PHONE_REGEXP.test(viewValue)) {\r\n                    ctrl.$setValidity('phone', true);\r\n                }\r\n                else {\r\n                    ctrl.$setValidity('phone', false);\r\n                }\r\n                return viewValue;\r\n            }\r\n        }\r\n    };\r\n})\r\n    .directive('phoneCountryCode', function () {\r\n    return {\r\n        require: 'ngModel',\r\n        link: function (scope, elm, attrs, ctrl) {\r\n            ctrl.$parsers.unshift(validate);\r\n            ctrl.$formatters.unshift(validate);\r\n            function validate(viewValue) {\r\n                if (!viewValue && viewValue !== '') {\r\n                    return viewValue;\r\n                }\r\n                if (viewValue === '' || PHONE_COUNTRY_CODE_REGEXP.test(viewValue)) {\r\n                    ctrl.$setValidity('phoneCountryCode', true);\r\n                }\r\n                else {\r\n                    ctrl.$setValidity('phoneCountryCode', false);\r\n                }\r\n                return viewValue;\r\n            }\r\n        }\r\n    };\r\n})\r\n    .directive('phoneWoCountryCode', function () {\r\n    return {\r\n        require: 'ngModel',\r\n        link: function (scope, elm, attrs, ctrl) {\r\n            ctrl.$parsers.unshift(validate);\r\n            ctrl.$formatters.unshift(validate);\r\n            function validate(viewValue) {\r\n                if (!viewValue && viewValue !== '') {\r\n                    return viewValue;\r\n                }\r\n                if (viewValue === '' || PHONE_WO_COUNTRY_CODE_REGEXP.test(viewValue)) {\r\n                    ctrl.$setValidity('phoneWoCountryCode', true);\r\n                }\r\n                else {\r\n                    ctrl.$setValidity('phoneWoCountryCode', false);\r\n                }\r\n                return viewValue;\r\n            }\r\n        }\r\n    };\r\n});\r\n//# sourceMappingURL=phone.js.map","src/validation/sameAs.js":"// copy-paste from http://jsfiddle.net/jaredwilli/77NLB/\r\nangular.module('dd.ui.validation.sameAs', [])\r\n    .directive('sameAs', function () {\r\n    return {\r\n        require: 'ngModel',\r\n        link: function (scope, elm, attrs, ctrl) {\r\n            ctrl.$parsers.unshift(validate);\r\n            ctrl.$formatters.unshift(validate);\r\n            scope.$watch('sameAs', function () {\r\n                validate(ctrl.$modelValue);\r\n            });\r\n            function validate(viewValue) {\r\n                var eth = scope.sameAs;\r\n                if (!eth) {\r\n                    return viewValue;\r\n                }\r\n                if (viewValue === eth) {\r\n                    ctrl.$setValidity('sameAs', true);\r\n                    return viewValue;\r\n                }\r\n                ctrl.$setValidity('sameAs', false);\r\n                return undefined;\r\n            }\r\n        },\r\n        scope: {\r\n            sameAs: '='\r\n        }\r\n    };\r\n});\r\n//# sourceMappingURL=sameAs.js.map","src/validation/validation.js":"angular.module('dd.ui.validation', ['dd.ui.validation.phone', 'dd.ui.validation.sameAs']);\r\n//# sourceMappingURL=validation.js.map","template/busy-element/busy-element.html.js":"angular.module(\"template/busy-element/busy-element.html\", []).run([\"$templateCache\", function($templateCache) {\n  $templateCache.put(\"template/busy-element/busy-element.html\",\n    \"<div class=\\\"be-container\\\" style=\\\"margin-left: -{{ marginLeft }}; margin-top: -{{ marginTop }}\\\">\\n\" +\n    \"    <div class=\\\"be-overlay\\\" ng-show=\\\"busy\\\" style=\\\"width: {{ width }}px; height: {{ height }}px; line-height: {{ height }}px\\\">\\n\" +\n    \"        <img src=\\\"https://drivr.com/img/spinner.gif\\\" />\\n\" +\n    \"    </div>\\n\" +\n    \"    <div class=\\\"be-overlay be-animate\\\" ng-show=\\\"status\\\" ng-class=\\\"statusClass\\\" style=\\\"width: {{ width }}px; height: {{ height }}px\\\"></div>\\n\" +\n    \"</div>\");\n}]);\n","template/datetimepicker/datetimepicker.html.js":"angular.module(\"template/datetimepicker/datetimepicker.html\", []).run([\"$templateCache\", function($templateCache) {\n  $templateCache.put(\"template/datetimepicker/datetimepicker.html\",\n    \"<div class=\\\"form-inline\\\">\\n\" +\n    \"\t<div class=\\\"form-group timepicker-container\\\">\\n\" +\n    \"\t\t<div uib-timepicker\\n\" +\n    \"\t\t\tng-model=\\\"time\\\"\\n\" +\n    \"\t\t\tng-disabled=\\\"ngDisabled\\\"\\n\" +\n    \"\t\t\tshow-meridian=\\\"showMeridian\\\"\\n\" +\n    \"\t\t\tminute-step=\\\"minuteStep\\\"\\n\" +\n    \"\t\t\tng-change=\\\"timeChange()\\\"\\n\" +\n    \"\t\t\tshow-spinners=\\\"showSpinners\\\">\\n\" +\n    \"\t\t</div>\\n\" +\n    \"\t</div>\\n\" +\n    \"\t<div class=\\\"form-group datepicker-container\\\">\\n\" +\n    \"\t\t<input class=\\\"form-control datepicker-input\\\" type=\\\"text\\\" style=\\\"width: 100px\\\"\\n\" +\n    \"\t\t\t\tuib-datepicker-popup\\n\" +\n    \"\t\t\t\tng-click=\\\"open($event)\\\"\\n\" +\n    \"\t\t\t\tng-change=\\\"dateChange($event)\\\"\\n\" +\n    \"\t\t\t\tis-open=\\\"opened\\\"\\n\" +\n    \"\t\t\t\tng-model=\\\"ngModel\\\"\\n\" +\n    \"\t\t\t\tng-disabled=\\\"ngDisabled\\\"\t\t\t\t\\n\" +\n    \"\t\t\t\tdate-disabled=\\\"dateDisabled({date: date, mode: mode})\\\"\\n\" +\n    \"\t\t\t\tclose-text=\\\"Close\\\"\\n\" +\n    \"\t\t\t\tpopup-placement=\\\"{{popupPlacement}}\\\"\\n\" +\n    \"\t\t\t\tshow-weeks=\\\"showWeeks\\\" />\\n\" +\n    \"\t</div>\\n\" +\n    \"</div>\");\n}]);\n","template/dd-datepicker/dd-datepicker.html.js":"angular.module(\"template/dd-datepicker/dd-datepicker.html\", []).run([\"$templateCache\", function($templateCache) {\n  $templateCache.put(\"template/dd-datepicker/dd-datepicker.html\",\n    \"<div class=\\\"input-group dd-datepicker\\\">\\n\" +\n    \"    <input class=\\\"form-control display-input datepicker-input\\\"\\n\" +\n    \"           type=\\\"text\\\"\\n\" +\n    \"           name=\\\"{{name}}\\\"\\n\" +\n    \"           placeholder=\\\"{{placeholder}}\\\"\\n\" +\n    \"           ng-class=\\\"{'short': useShortDateFormat}\\\"\\n\" +\n    \"           ng-disabled=\\\"ngDisabled\\\"\\n\" +\n    \"           ng-required=\\\"ngRequired\\\"\\n\" +\n    \"           ng-model=\\\"displayModel\\\" />\\n\" +\n    \"           \\n\" +\n    \"    <div class=\\\"input-group-btn\\\">\\n\" +\n    \"        <div type=\\\"text\\\"\\n\" +\n    \"           class=\\\"datepicker-input\\\" \\n\" +\n    \"           uib-datepicker-popup=\\\"{{dateFormat}}\\\"\\n\" +\n    \"           ng-model=\\\"bootstrapDateModel\\\"\\n\" +\n    \"           is-open=\\\"calendarOpened\\\"\\n\" +\n    \"           date-disabled=\\\"dateDisabled({date: date, mode: mode})\\\"\\n\" +\n    \"           datepicker-options=\\\"dateOptions\\\"\\n\" +\n    \"           close-text=\\\"Close\\\"\\n\" +\n    \"           popup-placement=\\\"{{popupPlacement}}\\\"\\n\" +\n    \"           show-weeks=\\\"showWeeks\\\"></div>\\n\" +\n    \"        <button ng-disabled=\\\"ngDisabled\\\" \\n\" +\n    \"                type=\\\"button\\\" \\n\" +\n    \"                class=\\\"btn btn-default open-calendar-btn\\\" \\n\" +\n    \"                ng-click=\\\"openCalendar($event)\\\"\\n\" +\n    \"                ng-class=\\\"{'calendar-btn-with-day':showDayName}\\\">\\n\" +\n    \"                <i class=\\\"glyphicon glyphicon-calendar\\\"></i>\\n\" +\n    \"        </button>\\n\" +\n    \"    </div>\\n\" +\n    \"    \\n\" +\n    \"    <div ng-if=\\\"showDayName\\\" class=\\\"input-group-addon day-name-label\\\">{{dayName}}</span>\\n\" +\n    \"\\n\" +\n    \"</div>\\n\" +\n    \"\");\n}]);\n","template/dd-datetimepicker/dd-datetimepicker.html.js":"angular.module(\"template/dd-datetimepicker/dd-datetimepicker.html\", []).run([\"$templateCache\", function($templateCache) {\n  $templateCache.put(\"template/dd-datetimepicker/dd-datetimepicker.html\",\n    \"<div class=\\\"dd-datetimepicker\\\">\\n\" +\n    \"\t<div class=\\\"input-group timepicker-container\\\">\\n\" +\n    \"         <span class=\\\"input-group-addon\\\"><span class=\\\"glyphicon glyphicon-time\\\"></span></span>\\n\" +\n    \"         <input class=\\\"form-control timepicker-input\\\" \\n\" +\n    \"                dd-timepicker\\n\" +\n    \"                placeholder=\\\"{{timePlaceholder}}\\\"\\n\" +\n    \"                is-date-type=\\\"true\\\"\\n\" +\n    \"                type=\\\"text\\\"\\n\" +\n    \"                ng-blur=\\\"onTimeBlur()\\\"\\n\" +\n    \"                ng-disabled=\\\"ngDisabled\\\"\\n\" +\n    \"                ng-required=\\\"ngRequired\\\"\\n\" +\n    \"                minute-step=\\\"minuteStep\\\"\\n\" +\n    \"                ng-model=\\\"time\\\" />\\n\" +\n    \"\t</div>\\n\" +\n    \"\t<div class=\\\"input-group datepicker-container\\\">\\n\" +\n    \"        <div dd-datepicker\\n\" +\n    \"               placeholder=\\\"{{datePlaceholder}}\\\"\\n\" +\n    \"               ng-disabled=\\\"datepickerDisabled || ngDisabled\\\"\\n\" +\n    \"               ng-required=\\\"ngRequired\\\"\\n\" +\n    \"               date-format=\\\"{{::dateFormat}}\\\"\\n\" +\n    \"               ng-model=\\\"date\\\"\\n\" +\n    \"               name=\\\"{{name}}\\\"\\n\" +\n    \"               show-day-name=\\\"showDayName\\\"\\n\" +\n    \"               close-text=\\\"Close\\\"\\n\" +\n    \"               popup-placement=\\\"{{popupPlacement}}\\\"\\n\" +\n    \"               date-disabled=\\\"dateDisabled({date: date, mode: mode})\\\">\\n\" +\n    \"        </div>\\n\" +\n    \"\t</div>\\n\" +\n    \"</div>\");\n}]);\n","template/form-actions/form-actions.html.js":"angular.module(\"template/form-actions/form-actions.html\", []).run([\"$templateCache\", function($templateCache) {\n  $templateCache.put(\"template/form-actions/form-actions.html\",\n    \"<div id=\\\"{{form.$name}}-actions-bar\\\" ng-show=\\\"form.$dirty\\\" class=\\\"form-actions-bar\\\">\\n\" +\n    \"    <div ng-transclude></div>\\n\" +\n    \"</div>\");\n}]);\n","template/lookup/lookup-item.html.js":"angular.module(\"template/lookup/lookup-item.html\", []).run([\"$templateCache\", function($templateCache) {\n  $templateCache.put(\"template/lookup/lookup-item.html\",\n    \"<div class=\\\"typeahead-group-header\\\" ng-if=\\\"match.model.firstInGroup\\\">{{match.model.lookupGroup}}</div>\\n\" +\n    \"<a href tabindex=\\\"-1\\\" ng-bind-html=\\\"match.label | uibTypeaheadHighlight:query\\\" ng-attr-title=\\\"{{match.label}}\\\">\\n\" +\n    \"</a>\");\n}]);\n","template/lookup/lookup.html.js":"angular.module(\"template/lookup/lookup.html\", []).run([\"$templateCache\", function($templateCache) {\n  $templateCache.put(\"template/lookup/lookup.html\",\n    \"<div class=\\\"lookup-container\\\" ng-cloak>\\n\" +\n    \"  <div class=\\\"input-group\\\">\\n\" +\n    \"    <input type=\\\"text\\\"\\n\" +\n    \"           ng-model=\\\"ngModel\\\"\\n\" +\n    \"           autocomplete=\\\"off\\\"\\n\" +\n    \"           uib-typeahead=\\\"d as getLabel(d) for d in getItems($viewValue)\\\"\\n\" +\n    \"           typeahead-on-select=\\\"onSelect($item, $model, $label)\\\"\\n\" +\n    \"           typeahead-editable=\\\"false\\\"\\n\" +\n    \"           typeahead-no-results=\\\"noResults\\\"\\n\" +\n    \"           typeahead-template-url=\\\"template/lookup/lookup-item.html\\\"\\n\" +\n    \"           typeahead-wait-ms=\\\"300\\\"\\n\" +\n    \"           typeahead-min-length=\\\"lookupMinLength\\\"\\n\" +\n    \"           ng-disabled=\\\"ngDisabled\\\"\\n\" +\n    \"           placeholder=\\\"{{placeholder}}\\\"\\n\" +\n    \"           class=\\\"form-control {{inputClass}}\\\" />\\n\" +\n    \"    <span class=\\\"lookup-legend\\\">\\n\" +\n    \"      <div class=\\\"lookup-icon\\\" ng-show=\\\"!isBusy\\\"></div>\\n\" +\n    \"      <div class=\\\"spinner-icon\\\" ng-show=\\\"isBusy\\\"></div>\\n\" +\n    \"    </span>\\n\" +\n    \"    <a class=\\\"lookup-clear\\\" ng-click=\\\"clear()\\\" tabindex=\\\"-1\\\" ng-class=\\\"{ 'disabled' : ngDisabled }\\\">\\n\" +\n    \"      <div class=\\\"clear-icon\\\" tooltip=\\\"Clear\\\" tooltip-append-to-body=\\\"true\\\"></div>\\n\" +\n    \"    </a>\\n\" +\n    \"    <div ng-show=\\\"noResults\\\" class=\\\"lookup-no-results\\\">\\n\" +\n    \"      <span class=\\\"detail\\\"><i class=\\\"glyphicon glyphicon-remove\\\"></i> No results found</span>\\n\" +\n    \"    </div>\\n\" +\n    \"  </div>\\n\" +\n    \"</div>\\n\" +\n    \"\");\n}]);\n"}}